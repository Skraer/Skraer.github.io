{"version":3,"sources":["store/issues/actions.ts","store/issues/index.ts","store/index.ts","store/issues/sagas.ts","domains/api.ts","modules/dates.ts","view/Issues/IssueItem.tsx","view/Issues/Pagination.tsx","view/Issues/IssuesList.tsx","view/SearchForm.tsx","view/routes/Home.tsx","view/routes/IssuePage.tsx","App.tsx","reportWebVitals.ts","index.tsx","store/types.ts"],"names":["setUsername","username","type","ISSUES","SET_USERNAME","payload","setRepo","repo","SET_REPO","startLoading","LOADING_START","endLoading","LOADING_END","fetchCount","FETCH_COUNT","fetchIssues","FETCH_ISSUES","setOptions","options","SET_OPTIONS","initialState","loading","list","error","totalCount","page","perPage","state","sagas","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","issues","action","SET_ISSUES","SET_COUNT","SET_PAGE","all","takeEvery","fetchIssuesSaga","fetchIssuesCountSaga","store","createStore","composeWithDevTools","applyMiddleware","run","API_URL","process","REACT_APP_API","api","Api","getState","u","r","ops","put","call","console","getIssuesCount","count","log","_url","a","urlString","url","getQueryString","fetch","response","json","data","map","item","title","number","createdAt","body","user","avatar","getFormattedData","str","slice","length","this","addZeroToDate","d","toString","getFullDateString","iso","Date","getDate","getMonth","getFullYear","getFullDateStringFromISO","getHours","getMinutes","getSeconds","getFullTimeStringFromISO","IssueItem","correctDate","className","src","alt","href","to","target","Pagination","amountElems","onChange","active","pageCount","Math","ceil","links","i","push","num","undefined","onClick","e","preventDefault","clickHandler","IssuesList","useSelector","useState","currentPage","setCurrentPage","needPagination","setNeedPagination","dispatch","useDispatch","useEffect","changePage","emptyComponent","loadingComponent","noIssuesComponent","key","SearchForm","userData","setUserData","setPerPage","normalizeString","trim","toLowerCase","changeHandler","name","getAttribute","value","fetchData","onSubmit","disabled","prev","Home","IssuePage","useHistory","location","hash","issueItem","filter","App","issueError","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3dcb59e.chunk.js","sourcesContent":["import { ActionType } from '..'\r\nimport { IssuesOptionsType } from '../../interfaces/api'\r\nimport { IIssuesList } from '../../interfaces/issues'\r\nimport { ISSUES } from '../types'\r\n\r\nexport const setUsername = (username: string): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_USERNAME,\r\n    payload: username,\r\n  }\r\n}\r\n\r\nexport const setRepo = (repo: string): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_REPO,\r\n    payload: repo,\r\n  }\r\n}\r\n\r\nexport const startLoading = (): ActionType => {\r\n  return {\r\n    type: ISSUES.LOADING_START,\r\n  }\r\n}\r\n\r\nexport const endLoading = (): ActionType => {\r\n  return {\r\n    type: ISSUES.LOADING_END,\r\n  }\r\n}\r\n\r\nexport const setCount = (count: number): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_COUNT,\r\n    payload: count,\r\n  }\r\n}\r\n\r\nexport const fetchCount = (): ActionType => {\r\n  return {\r\n    type: ISSUES.FETCH_COUNT,\r\n  }\r\n}\r\n\r\nexport const setPage = (page: number): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_PAGE,\r\n    payload: page,\r\n  }\r\n}\r\n\r\nexport const fetchIssues = (): ActionType => {\r\n  return {\r\n    type: ISSUES.FETCH_ISSUES,\r\n  }\r\n}\r\n\r\nexport const setIssues = (list: IIssuesList | null): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_ISSUES,\r\n    payload: list,\r\n  }\r\n}\r\n\r\nexport const setOptions = (\r\n  options: IssuesOptionsType | null | undefined\r\n): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_OPTIONS,\r\n    payload: options,\r\n  }\r\n}\r\n\r\n// function* watcherFetchSaga(): Generator {\r\n//   yield take('ISSUES/FETCH_ISSUES')\r\n//   yield fetchIssuesSaga()\r\n// }\r\n\r\n// const setPage = (page: number) => {\r\n//   return (dispatch: Dispatch) => {\r\n//     const [u, r] = [\r\n//       store.getState().issues.username,\r\n//       store.getState().issues.repo,\r\n//     ]\r\n\r\n//     // dispatch({ type: FETCH_ISSUES, payload: {} })\r\n//     // dispatch(fetchIssues<IssuesActionType>(u, r, { page: page }))\r\n\r\n//     dispatch({ type: ISSUES.SET_PAGE, payload: page })\r\n//   }\r\n// }\r\n\r\n// export {\r\n//   setUsername,\r\n//   setRepo,\r\n//   startLoading,\r\n//   endLoading,\r\n//   setCount,\r\n//   setPage,\r\n//   fetchIssues,\r\n//   setIssues,\r\n//   setOptions,\r\n//   fetchCount,\r\n//   // watcherFetchSaga,\r\n// }\r\n","import { IIssuesList } from '../../interfaces/issues'\r\nimport { ActionType } from '..'\r\n// import { Dispatch } from 'redux'\r\n\r\nimport { ISSUES } from '../types'\r\nimport { IssuesOptionsType } from '../../interfaces/api'\r\n\r\n// export type FetchIssuesType = Dispatch\r\n\r\nconst initialOptions: IssuesOptionsType = {\r\n  perPage: '10',\r\n  page: 1,\r\n  state: 'open',\r\n}\r\n\r\nconst initialState: IIssuesList = {\r\n  loading: false,\r\n  list: null,\r\n  error: null,\r\n  totalCount: null,\r\n  username: '',\r\n  repo: '',\r\n  page: null,\r\n  options: initialOptions,\r\n  // perPage: 10,\r\n}\r\n\r\nconst issuesReducer = (state = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ISSUES.SET_USERNAME:\r\n      return { ...state, username: action.payload }\r\n    case ISSUES.SET_REPO:\r\n      return { ...state, repo: action.payload }\r\n    case ISSUES.SET_ISSUES:\r\n      return { ...state, list: action.payload }\r\n    case ISSUES.LOADING_START:\r\n      return { ...state, loading: true }\r\n    case ISSUES.LOADING_END:\r\n      return { ...state, loading: false }\r\n    case ISSUES.SET_COUNT:\r\n      return { ...state, totalCount: action.payload }\r\n    case ISSUES.SET_PAGE:\r\n      return { ...state, page: action.payload }\r\n    case ISSUES.SET_OPTIONS:\r\n      return { ...state, options: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport { issuesReducer }\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { issuesReducer } from './issues/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { all, takeEvery } from 'redux-saga/effects'\r\nimport { fetchIssuesCountSaga, fetchIssuesSaga } from './issues/sagas'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { ISSUES } from './types'\r\n\r\nexport type ActionType = {\r\n  type: string\r\n  payload?: any\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst rootReducer = combineReducers({\r\n  issues: issuesReducer,\r\n})\r\n\r\nfunction* sagas() {\r\n  yield all([\r\n    takeEvery(ISSUES.FETCH_ISSUES, fetchIssuesSaga),\r\n    takeEvery(ISSUES.FETCH_COUNT, fetchIssuesCountSaga),\r\n  ])\r\n}\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n)\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store\r\n","import { call, put, select } from 'redux-saga/effects'\r\nimport store from '..'\r\nimport { Api } from '../../domains/api'\r\nimport { ISSUES } from '../types'\r\nimport { endLoading, startLoading } from './actions'\r\n\r\nconst API_URL = process?.env?.REACT_APP_API || 'https://api.github.com'\r\n// const API_URL = 'https://api.github.com'\r\n\r\nconst api = new Api(API_URL)\r\n\r\nfunction* fetchIssuesSaga(): Generator {\r\n  const [u, r, ops] = [\r\n    store.getState().issues.username,\r\n    store.getState().issues.repo,\r\n    store.getState().issues.options,\r\n  ]\r\n\r\n  yield put(startLoading())\r\n  try {\r\n    const list = yield call(api.fetchIssues, u, r, ops)\r\n    yield put({ type: ISSUES.SET_ISSUES, payload: list })\r\n  } catch (e) {\r\n    console.error(e)\r\n  } finally {\r\n    yield put(endLoading())\r\n  }\r\n}\r\n\r\nfunction* fetchIssuesCountSaga(): Generator {\r\n  const [u, r, ops] = [\r\n    store.getState().issues.username,\r\n    store.getState().issues.repo,\r\n    store.getState().issues.options,\r\n  ]\r\n  try {\r\n    const count = yield call(api.getIssuesCount, u, r, ops.state)\r\n    yield put({ type: ISSUES.SET_COUNT, payload: count })\r\n    console.log(count)\r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n}\r\n\r\nexport { fetchIssuesSaga, fetchIssuesCountSaga }\r\n","// import { ApiHandlerType, IssuesOptionsType } from '../interfaces/api'\r\n\r\nimport { IApi, IssuesOptionsType } from '../interfaces/api'\r\nimport { IIssueItem } from '../interfaces/issues'\r\n\r\n// const API = process.env.REACT_APP_API\r\n\r\n// type parsedDataItemType = {\r\n//   [key: string]: string | {[key: string]: any}\r\n// }\r\n\r\nexport class Api implements IApi {\r\n  constructor(private _url: string) {}\r\n  get url(): string {\r\n    return this._url\r\n  }\r\n  fetchIssues = async (\r\n    username: string,\r\n    repo: string,\r\n    options?: IssuesOptionsType\r\n  ) => {\r\n    let urlString: string = `${this.url}/repos/${username}/${repo}/issues`\r\n    if (options) urlString += this.getQueryString(options)\r\n    const response = await fetch(urlString)\r\n    const data = await response.json()\r\n\r\n    // return this.getFormattedData(data)\r\n    // console.log(data)\r\n\r\n    // TODO исправить на вызов метода\r\n\r\n    return data.map(\r\n      (item: { [key: string]: any }): IIssueItem => ({\r\n        title: item['title'],\r\n        url: item['html_url'],\r\n        number: item['number'],\r\n        createdAt: item['created_at'],\r\n        body: item['body'],\r\n        user: {\r\n          avatar: item['user']['avatar_url'],\r\n          username: item['user']['login'],\r\n        },\r\n      })\r\n    )\r\n  }\r\n\r\n  getFormattedData = (data: []): IIssueItem[] => {\r\n    return data.map(\r\n      (item: { [key: string]: any }): IIssueItem => ({\r\n        title: item['title'],\r\n        url: item['html_url'],\r\n        number: item['number'],\r\n        createdAt: item['created_at'],\r\n        body: item['body'],\r\n        user: {\r\n          avatar: item['user']['avatar_url'],\r\n          username: item['user']['login'],\r\n        },\r\n      })\r\n    )\r\n  }\r\n  getIssuesCount = async (username: string, repo: string, state?: string) => {\r\n    state = state || 'open'\r\n    const response = await fetch(\r\n      `${this.url}/search/issues?q=repo:${username}/${repo}%20is:issue+state:${state}`\r\n    )\r\n    const count = await response.json()\r\n    return count['total_count']\r\n    // return await reponse.json().then((r) => r['total_count'])\r\n  }\r\n  getQueryString = (options: IssuesOptionsType) => {\r\n    let str = '?'\r\n    if (options.perPage) str += `per_page=${options.perPage}&`\r\n    if (options.page) str += `page=${options.page}&`\r\n    if (options.state) str += `state=${options.state}&`\r\n    str = str.slice(0, str.length - 1)\r\n    return str\r\n  }\r\n}\r\n","const addZeroToDate = (d: number): string | number =>\r\n  d.toString().length === 1 ? `0${d.toString()}` : d\r\n\r\nconst getFullDateStringFromISO = (iso: string): string => {\r\n  const d = new Date(iso)\r\n  return `${addZeroToDate(d.getDate())}.${addZeroToDate(\r\n    d.getMonth()\r\n  )}.${d.getFullYear()}`\r\n}\r\n\r\nconst getFullTimeStringFromISO = (iso: string): string => {\r\n  const d = new Date(iso)\r\n  return `${addZeroToDate(d.getHours())}:${addZeroToDate(\r\n    d.getMinutes()\r\n  )}:${addZeroToDate(d.getSeconds())}`\r\n}\r\n\r\nconst getFullDateString = (iso: string): string => {\r\n  return `${getFullDateStringFromISO(iso)} ${getFullTimeStringFromISO(iso)}`\r\n}\r\n\r\nexport { getFullDateStringFromISO, getFullTimeStringFromISO, getFullDateString }\r\n","import React from 'react'\r\n// import { useEffect, useState } from 'react'\r\nimport { getFullDateString } from '../../modules/dates'\r\nimport { IIssueItem } from '../../interfaces/issues'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst IssueItem: React.FC<IIssueItem> = ({\r\n  title,\r\n  createdAt,\r\n  number,\r\n  url,\r\n  user,\r\n}: IIssueItem) => {\r\n  const correctDate = getFullDateString(createdAt)\r\n\r\n  return (\r\n    <div className=\"issue-item\">\r\n      <div className=\"issue-item_main\">\r\n        <div className=\"issue-item_user\">\r\n          <div className=\"issue-item_user-avatar\">\r\n            <img src={user.avatar} alt=\"\" />\r\n          </div>\r\n          <a className=\"issue-item_user-link\" href=\"#\">\r\n            {user.username}\r\n          </a>\r\n        </div>\r\n\r\n        <h4 className=\"issue-item_title\">\r\n          <NavLink to={`/details#${number}`}>{title} </NavLink>\r\n        </h4>\r\n        <div className=\"issue-item_more\">\r\n          <a href={url} target=\"_blank\">\r\n            Перейти\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"issue-item_footer\">\r\n        <span className=\"issue-item_date\">Создано: {correctDate}</span>\r\n        <span className=\"issue-item_number\">Номер обращения: {number}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { IssueItem }\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n  amountElems: number | null\r\n  perPage: number\r\n  onChange(page: number): void\r\n  active: number\r\n}\r\n\r\nconst Pagination: React.FC<Props> = ({\r\n  amountElems,\r\n  perPage,\r\n  onChange,\r\n  active,\r\n}) => {\r\n  const pageCount: number = amountElems ? Math.ceil(amountElems / perPage) : 0\r\n  const links: number[] = []\r\n\r\n  for (let i = 1; i <= pageCount; i++) {\r\n    links.push(i)\r\n  }\r\n\r\n  const clickHandler = (\r\n    e: React.MouseEvent<HTMLAnchorElement>,\r\n    page: number\r\n  ) => {\r\n    e.preventDefault()\r\n    onChange(page)\r\n  }\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      {links.map((num: number) => (\r\n        <li key={num} className={active === num ? 'active' : undefined}>\r\n          <a\r\n            href={num.toString()}\r\n            onClick={(e) => {\r\n              clickHandler(e, num)\r\n            }}\r\n          >\r\n            {num}\r\n          </a>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport { Pagination }\r\n","import React from 'react'\r\nimport './issues.css'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DefaultIssuesState } from '../../interfaces/issues'\r\nimport { fetchIssues, setOptions } from '../../store/issues/actions'\r\nimport { IssueItem } from './IssueItem'\r\nimport { Pagination } from './Pagination'\r\n\r\nconst IssuesList: React.FC = () => {\r\n  const { list, totalCount, loading, options } = useSelector(\r\n    (state: DefaultIssuesState) => state.issues\r\n  )\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [needPagination, setNeedPagination] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (list?.length) changePage()\r\n  }, [currentPage])\r\n\r\n  useEffect(() => {\r\n    if (list && totalCount && totalCount > 10) setNeedPagination(true)\r\n    else setNeedPagination(false)\r\n  }, [totalCount, list])\r\n\r\n  const changePage = (): void => {\r\n    dispatch(setOptions({ ...options, page: currentPage }))\r\n    dispatch(fetchIssues())\r\n    console.log(currentPage)\r\n  }\r\n\r\n  const emptyComponent = <p className=\"text-center\">Здесь данных нет :(</p>\r\n  const loadingComponent = <p className=\"text-center\">Загрузка...</p>\r\n  const noIssuesComponent = (\r\n    <p className=\"text-center\">У этого репозитория нет ни одного обращения</p>\r\n  )\r\n\r\n  return (\r\n    <div className=\"container-medium\">\r\n      <div className=\"issue-list\">\r\n        {loading\r\n          ? loadingComponent\r\n          : !list\r\n          ? emptyComponent\r\n          : list.length\r\n          ? list.map((item) => <IssueItem {...item} key={item.number} />)\r\n          : noIssuesComponent}\r\n      </div>\r\n      {needPagination && (\r\n        <Pagination\r\n          amountElems={totalCount}\r\n          perPage={+options.perPage}\r\n          onChange={(page) => {\r\n            setCurrentPage(page)\r\n          }}\r\n          active={currentPage}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { IssuesList }\r\n","import React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DefaultIssuesState } from '../interfaces/issues'\r\n// import store from '../store'\r\nimport {\r\n  setUsername,\r\n  setRepo,\r\n  fetchIssues,\r\n  setOptions,\r\n  fetchCount,\r\n} from '../store/issues/actions'\r\n\r\nconst SearchForm: React.FC = () => {\r\n  const issues = useSelector((state: DefaultIssuesState) => state.issues)\r\n  const [userData, setUserData] = useState({\r\n    username: issues.username,\r\n    repo: issues.repo,\r\n  })\r\n  const [perPage, setPerPage] = useState('10')\r\n  const dispatch = useDispatch()\r\n\r\n  const normalizeString = (str: string): string => str.trim().toLowerCase()\r\n\r\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const name: string = e.target.getAttribute('name') || '' //FIXME костыль\r\n    setUserData({\r\n      ...userData,\r\n      [name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const perPageChangeHandler = (\r\n    e: React.ChangeEvent<HTMLSelectElement>\r\n  ): void => {\r\n    setPerPage((prev: string | number) =>\r\n      prev === e.target.value ? prev : e.target.value\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (issues.list && issues.list.length) {\r\n      fetchData()\r\n    }\r\n  }, [perPage])\r\n\r\n  const userSearchSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    fetchData()\r\n  }\r\n\r\n  const fetchData = (): void => {\r\n    const u = normalizeString(userData.username)\r\n    const r = normalizeString(userData.repo)\r\n    dispatch(setUsername(u))\r\n    dispatch(setRepo(r))\r\n    dispatch(setOptions({ ...issues.options, perPage: perPage }))\r\n    dispatch(fetchIssues())\r\n    dispatch(fetchCount())\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-form\">\r\n      <form onSubmit={userSearchSubmit}>\r\n        <div className=\"col\">\r\n          <label className=\"input-field\">\r\n            <span>Введите логин пользователя: </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={userData.username}\r\n              onChange={changeHandler}\r\n              disabled={issues.loading}\r\n            />\r\n          </label>\r\n          <label className=\"input-field\">\r\n            <span>Введите название репозитория: </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"repo\"\r\n              value={userData.repo}\r\n              onChange={changeHandler}\r\n              disabled={issues.loading}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" disabled={issues.loading}>\r\n            Поиск\r\n          </button>\r\n        </div>\r\n        <div className=\"input-field select-field\">\r\n          <label>\r\n            <span>Количество отображаемых обращений</span>\r\n            <select value={perPage} onChange={perPageChangeHandler}>\r\n              <option value=\"10\">10</option>\r\n              <option value=\"30\">30</option>\r\n              <option value=\"50\">50</option>\r\n            </select>\r\n          </label>\r\n        </div>\r\n        {/* <StatusBar /> */}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchForm\r\n","import React from 'react'\r\nimport { IssuesList } from '../Issues/IssuesList'\r\nimport SearchForm from '../SearchForm'\r\n\r\nconst Home: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <SearchForm />\r\n      <IssuesList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Home }\r\n","import React from 'react'\r\nimport './issue-page.css'\r\nimport { DefaultIssuesState, IIssueItem } from '../../interfaces/issues'\r\n// import { match } from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport { getFullDateString } from '../../modules/dates'\r\n\r\nconst IssuePage: React.FC = () => {\r\n  const history = useHistory()\r\n  const num = history.location.hash.slice(1)\r\n  const issues = useSelector((state: DefaultIssuesState) => state.issues)\r\n  const issueItem = issues.list?.filter(\r\n    (item: IIssueItem) => item.number.toString() === num\r\n  )[0]\r\n  console.log(num)\r\n\r\n  console.log(issueItem)\r\n\r\n  return (\r\n    <div className=\"issue-page\">\r\n      <p>Детальная информация по обращению номер: {issueItem?.number}</p>\r\n      <p>Заголовок: {issueItem?.title}</p>\r\n      <p>Автор: {issueItem?.user.username}</p>\r\n      <p>\r\n        Ссылка:{' '}\r\n        <a href={issueItem?.url} target=\"_blank\">\r\n          {issueItem?.url}\r\n        </a>\r\n      </p>\r\n      <p>Нераспарсенный текст: {issueItem?.body}</p>\r\n      <p>Создано: {getFullDateString(issueItem!.createdAt)}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { IssuePage }\r\n","import React from 'react'\nimport './App.css'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { DefaultIssuesState, IIssueItem } from './interfaces/issues'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  NavLink,\n} from 'react-router-dom'\nimport { Home } from './view/routes/Home'\nimport { IssuePage } from './view/routes/IssuePage'\n\nconst App: React.FC = () => {\n  const issueError = useSelector(\n    (state: DefaultIssuesState) => state.issues.error\n  )\n\n  useEffect(() => {\n    console.log(issueError)\n  }, [issueError])\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <header className=\"header\">\n          <NavLink to=\"/\" exact>\n            Главная\n          </NavLink>\n          {/* <NavLink to=\"/details\">Детали</NavLink> */}\n        </header>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/details\">\n            <Route path=\"/details\" />\n            <IssuePage></IssuePage>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    {/* <Route path=\"/details\"></Route> */}\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","export const ISSUES = {\r\n  SET_USERNAME: 'ISSUES/SET_USERNAME',\r\n  SET_REPO: 'ISSUES/SET_REPO',\r\n  FETCH_ISSUES: 'ISSUES/FETCH_ISSUES',\r\n  SET_ISSUES: 'ISSUES/SET_ISSUES',\r\n  LOADING_START: 'ISSUES/LOADING_START',\r\n  LOADING_END: 'ISSUES/LOADING_END',\r\n  SET_COUNT: 'ISSUES/SET_COUNT',\r\n  FETCH_COUNT: 'ISSUES/FETCH_COUNT',\r\n  SET_PAGE: 'ISSUES/SET_PAGE',\r\n  SET_OPTIONS: 'ISSUES/SET_OPTIONS',\r\n}\r\n\r\nexport const NOTICE = {\r\n  SHOW_ERROR: 'NOTICE/SHOW_ERROR',\r\n  CLEAR_ERROR: 'NOTICE/CLEAR_ERROR',\r\n}\r\n\r\n// export const SET_USERNAME = 'ISSUES/SET_USERNAME'\r\n// export const SET_REPO = 'ISSUES/SET_REPO'\r\n// export const FETCH_ISSUES = 'ISSUES/FETCH_ISSUES'\r\n// export const SET_ISSUES = 'ISSUES/SET_ISSUES'\r\n// export const LOADING_START = 'ISSUES/LOADING_START'\r\n// export const LOADING_END = 'ISSUES/LOADING_END'\r\n// export const SHOW_ERROR = 'ISSUES/SHOW_ERROR'\r\n// export const CLEAR_ERROR = 'ISSUES/CLEAR_ERROR'\r\n// export const SET_COUNT = 'ISSUES/SET_COUNT'\r\n// export const SET_PAGE = 'ISSUES/SET_PAGE'\r\n\r\n// export const SET_ERROR = 'ISSUES/SET_ERROR'\r\n// export const REMOVE_ERROR = 'ISSUES/REMOVE_ERROR'\r\n"],"sourceRoot":""}