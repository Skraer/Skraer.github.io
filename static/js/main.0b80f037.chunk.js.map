{"version":3,"sources":["store/types.ts","store/issues/index.ts","store/index.ts","domains/api.ts","store/issues/actions.ts","view/SearchForm.tsx","modules/dates.ts","view/Issues/IssueItem.tsx","view/Issues/Pagination.tsx","view/Issues/IssuesList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ISSUES","initialState","loading","list","error","totalCount","username","repo","page","sagas","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","issues","state","action","type","payload","all","takeEvery","fetchIssuesSaga","store","createStore","composeWithDevTools","applyMiddleware","run","Api","_url","fetchIssues","options","a","urlString","url","getQueryString","fetch","response","json","data","map","item","title","number","createdAt","getFormattedData","getIssuesCount","reponse","then","r","str","perPage","slice","length","this","api","console","log","getState","u","put","call","SearchForm","useState","setUsername","setRepo","setPerPage","useSelector","dispatch","useDispatch","normalizeString","trim","toLowerCase","className","onSubmit","e","preventDefault","setUsernameAction","setRepoAction","name","value","onChange","target","disabled","addZeroToDate","d","toString","getFullDateString","iso","Date","getDate","getMonth","getFullYear","getFullDateStringFromISO","getHours","getMinutes","getSeconds","getFullTimeStringFromISO","IssueItem","correctDate","href","Pagination","amountElems","active","pageCount","Math","ceil","links","i","push","num","undefined","onClick","clickHandler","IssuesList","currentPage","setCurrentPage","empty","needPagination","key","App","issueError","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b80f037.chunk.js","sourcesContent":["export const ISSUES = {\r\n  SET_USERNAME: 'ISSUES/SET_USERNAME',\r\n  SET_REPO: 'ISSUES/SET_REPO',\r\n  FETCH_ISSUES: 'ISSUES/FETCH_ISSUES',\r\n  SET_ISSUES: 'ISSUES/SET_ISSUES',\r\n  LOADING_START: 'ISSUES/LOADING_START',\r\n  LOADING_END: 'ISSUES/LOADING_END',\r\n  SET_COUNT: 'ISSUES/SET_COUNT',\r\n  SET_PAGE: 'ISSUES/SET_PAGE',\r\n}\r\n\r\nexport const NOTICE = {\r\n  SHOW_ERROR: 'NOTICE/SHOW_ERROR',\r\n  CLEAR_ERROR: 'NOTICE/CLEAR_ERROR',\r\n}\r\n\r\n// export const SET_USERNAME = 'ISSUES/SET_USERNAME'\r\n// export const SET_REPO = 'ISSUES/SET_REPO'\r\n// export const FETCH_ISSUES = 'ISSUES/FETCH_ISSUES'\r\n// export const SET_ISSUES = 'ISSUES/SET_ISSUES'\r\n// export const LOADING_START = 'ISSUES/LOADING_START'\r\n// export const LOADING_END = 'ISSUES/LOADING_END'\r\n// export const SHOW_ERROR = 'ISSUES/SHOW_ERROR'\r\n// export const CLEAR_ERROR = 'ISSUES/CLEAR_ERROR'\r\n// export const SET_COUNT = 'ISSUES/SET_COUNT'\r\n// export const SET_PAGE = 'ISSUES/SET_PAGE'\r\n\r\n// export const SET_ERROR = 'ISSUES/SET_ERROR'\r\n// export const REMOVE_ERROR = 'ISSUES/REMOVE_ERROR'\r\n","import { IIssuesList } from '../../interfaces/issues'\r\nimport { ActionType } from '..'\r\n// import { Dispatch } from 'redux'\r\n\r\nimport { ISSUES } from '../types'\r\n\r\n// export type FetchIssuesType = Dispatch\r\n\r\nconst initialState: IIssuesList = {\r\n  loading: false,\r\n  list: null,\r\n  error: null,\r\n  totalCount: null,\r\n  username: '',\r\n  repo: '',\r\n  page: null,\r\n  // perPage: 10,\r\n}\r\n\r\nconst issuesReducer = (state = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ISSUES.SET_USERNAME:\r\n      return { ...state, username: action.payload }\r\n    case ISSUES.SET_REPO:\r\n      return { ...state, repo: action.payload }\r\n    case ISSUES.SET_ISSUES:\r\n      return { ...state, list: action.payload }\r\n    case ISSUES.LOADING_START:\r\n      return { ...state, loading: true }\r\n    case ISSUES.LOADING_END:\r\n      return { ...state, loading: false }\r\n    // case ISSUES.SHOW_ERROR:\r\n    //   return { ...state, error: action.payload }\r\n    // case ISSUES.CLEAR_ERROR:\r\n    //   return { ...state, error: null }\r\n    case ISSUES.SET_COUNT:\r\n      return { ...state, totalCount: action.payload }\r\n    case ISSUES.SET_PAGE:\r\n      return { ...state, page: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport { issuesReducer }\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport { issuesReducer } from './issues/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\n// import rootSaga from './sagas'\r\nimport { all, takeEvery } from 'redux-saga/effects'\r\n// import { watcherFetchSaga } from './issues/actions'\r\nimport { fetchIssuesSaga } from './issues/actions'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { ISSUES } from './types'\r\n\r\nexport type ActionType = {\r\n  type: string\r\n  payload?: any\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst rootReducer = combineReducers({\r\n  issues: issuesReducer,\r\n})\r\n\r\nfunction* sagas() {\r\n  // yield all([watcherFetchSaga])\r\n  yield all([takeEvery(ISSUES.FETCH_ISSUES, fetchIssuesSaga)])\r\n  // yield watcherFetchSaga()\r\n}\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n)\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store\r\n","// import { ApiHandlerType, IssuesOptionsType } from '../interfaces/api'\r\n\r\nimport { IApi, IssuesOptionsType } from '../interfaces/api'\r\nimport { IIssueItem } from '../interfaces/issues'\r\n\r\n// const API = process.env.REACT_APP_API\r\n\r\nexport class Api implements IApi {\r\n  constructor(private _url: string) {}\r\n  get url(): string {\r\n    return this._url\r\n  }\r\n  fetchIssues = async (\r\n    username: string,\r\n    repo: string,\r\n    options?: IssuesOptionsType\r\n  ) => {\r\n    let urlString: string = `${this.url}/repos/${username}/${repo}/issues`\r\n    if (options) urlString += this.getQueryString(options)\r\n    const response = await fetch(urlString)\r\n    const data = await response.json()\r\n\r\n    // return this.getFormattedData(data)\r\n\r\n    // TODO исправить на вызов метода\r\n    return data.map(\r\n      (item: { [key: string]: string }): IIssueItem => ({\r\n        title: item['title'],\r\n        url: item['html_url'],\r\n        number: item['number'],\r\n        createdAt: item['created_at'],\r\n      })\r\n    )\r\n  }\r\n\r\n  getFormattedData = (data: []): IIssueItem[] => {\r\n    return data.map(\r\n      (item: { [key: string]: string }): IIssueItem => ({\r\n        title: item['title'],\r\n        url: item['html_url'],\r\n        number: item['number'],\r\n        createdAt: item['created_at'],\r\n      })\r\n    )\r\n  }\r\n  getIssuesCount = async (username: string, repo: string, state?: string) => {\r\n    state = state || 'open'\r\n    const reponse = await fetch(\r\n      `${this.url}/search/issues?q=repo:${username}/${repo}%20is:issue+state:${state}`\r\n    )\r\n    return await reponse.json().then((r) => r['total_count'])\r\n  }\r\n  getQueryString = (options: IssuesOptionsType) => {\r\n    let str = '?'\r\n    if (options.perPage) str += `per_page=${options.perPage}&`\r\n    if (options.page) str += `page=${options.page}&`\r\n    if (options.state) str += `state=${options.state}&`\r\n    str = str.slice(0, str.length - 1)\r\n    return str\r\n  }\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { call, put, take, takeEvery } from 'redux-saga/effects'\r\n\r\nimport store, { ActionType } from '..'\r\nimport { Api } from '../../domains/api'\r\nimport { IIssuesList } from '../../interfaces/issues'\r\nimport { ISSUES } from '../types'\r\n\r\n// export type FetchIssuesType = Dispatch\r\n\r\n// export type watcherType = Generator\r\n\r\n// const API_URL = process.env.REACT_APP_API || ''\r\nconst API_URL = 'https://api.github.com'\r\n\r\nconst api = new Api(API_URL)\r\n\r\nconst setUsername = (username: string): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_USERNAME,\r\n    payload: username,\r\n  }\r\n}\r\n\r\nconst setRepo = (repo: string): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_REPO,\r\n    payload: repo,\r\n  }\r\n}\r\n\r\nconst startLoading = (): ActionType => {\r\n  return {\r\n    type: ISSUES.LOADING_START,\r\n  }\r\n}\r\n\r\nconst endLoading = (): ActionType => {\r\n  return {\r\n    type: ISSUES.LOADING_END,\r\n  }\r\n}\r\n\r\nconst setCount = (count: number): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_COUNT,\r\n    payload: count,\r\n  }\r\n}\r\n\r\nconst setPage = (page: number): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_PAGE,\r\n    payload: page,\r\n  }\r\n}\r\n\r\nconst fetchIssues = (): ActionType => {\r\n  return {\r\n    type: ISSUES.FETCH_ISSUES,\r\n  }\r\n}\r\n\r\nconst setIssues = (list: IIssuesList | null): ActionType => {\r\n  return {\r\n    type: ISSUES.SET_ISSUES,\r\n    payload: list,\r\n  }\r\n}\r\n\r\nfunction* fetchIssuesSaga(): Generator {\r\n  console.log(true)\r\n\r\n  const [u, r] = [\r\n    store.getState().issues.username,\r\n    store.getState().issues.repo,\r\n  ]\r\n\r\n  yield put(startLoading())\r\n\r\n  const list = yield call(api.fetchIssues, u, r)\r\n  yield put({ type: ISSUES.SET_ISSUES, payload: list })\r\n  console.log(list)\r\n  yield put(endLoading())\r\n}\r\n\r\n// function* watcherFetchSaga(): Generator {\r\n//   yield take('ISSUES/FETCH_ISSUES')\r\n//   yield fetchIssuesSaga()\r\n// }\r\n\r\n// const setPage = (page: number) => {\r\n//   return (dispatch: Dispatch) => {\r\n//     const [u, r] = [\r\n//       store.getState().issues.username,\r\n//       store.getState().issues.repo,\r\n//     ]\r\n\r\n//     // dispatch({ type: FETCH_ISSUES, payload: {} })\r\n//     // dispatch(fetchIssues<IssuesActionType>(u, r, { page: page }))\r\n\r\n//     dispatch({ type: ISSUES.SET_PAGE, payload: page })\r\n//   }\r\n// }\r\n\r\nexport {\r\n  setUsername,\r\n  setRepo,\r\n  startLoading,\r\n  endLoading,\r\n  setCount,\r\n  setPage,\r\n  fetchIssues,\r\n  setIssues,\r\n  fetchIssuesSaga,\r\n  // watcherFetchSaga,\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DefaultIssuesState } from '../interfaces/issues'\r\nimport {\r\n  // fetchIssues,\r\n  setUsername as setUsernameAction,\r\n  setRepo as setRepoAction,\r\n  fetchIssues,\r\n} from '../store/issues/actions'\r\nimport { ISSUES } from '../store/types'\r\n\r\nconst SearchForm: React.FC = () => {\r\n  const [username, setUsername] = useState('')\r\n  const [repo, setRepo] = useState('')\r\n  const [perPage, setPerPage] = useState(10)\r\n\r\n  const loading = useSelector(\r\n    (state: DefaultIssuesState) => state.issues.loading\r\n  )\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const normalizeString = (str: string): string => str.trim().toLowerCase()\r\n\r\n  const usernameChangeHandler = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setUsername(e.target.value)\r\n  }\r\n\r\n  const repoChangeHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setRepo(e.target.value)\r\n  }\r\n\r\n  const userSearchSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    const u = normalizeString(username)\r\n    const r = normalizeString(repo)\r\n    dispatch(setUsernameAction(u))\r\n    dispatch(setRepoAction(r))\r\n    dispatch(fetchIssues())\r\n    // dispatch({\r\n    //   type: ISSUES.FETCH_ISSUES,\r\n    //   payload: {\r\n    //     username: u,\r\n    //     repo: r,\r\n    //     options: {\r\n    //       perPage,\r\n    //     },\r\n    //   },\r\n    // })\r\n    // dispatch(fetchIssues(u, r, { perPage }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-form\">\r\n      <form onSubmit={userSearchSubmit}>\r\n        <div className=\"col\">\r\n          <label className=\"input-field\">\r\n            <span>Введите логин пользователя: </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={usernameChangeHandler}\r\n              disabled={loading}\r\n            />\r\n          </label>\r\n          <label className=\"input-field\">\r\n            <span>Введите название репозитория: </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"repo\"\r\n              value={repo}\r\n              onChange={repoChangeHandler}\r\n              disabled={loading}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" disabled={loading}>\r\n            Поиск\r\n          </button>\r\n        </div>\r\n        <div className=\"input-field select-field\">\r\n          <label>\r\n            <span>Количество отображаемых обращений</span>\r\n            <select\r\n              value={perPage}\r\n              onChange={(e) => {\r\n                setPerPage(+e.target.value)\r\n              }}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"30\">30</option>\r\n              <option value=\"50\">50</option>\r\n            </select>\r\n          </label>\r\n        </div>\r\n        {/* <StatusBar /> */}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchForm\r\n","const addZeroToDate = (d: number): string | number =>\r\n  d.toString().length === 1 ? `0${d.toString()}` : d\r\n\r\nconst getFullDateStringFromISO = (iso: string): string => {\r\n  const d = new Date(iso)\r\n  return `${addZeroToDate(d.getDate())}.${addZeroToDate(\r\n    d.getMonth()\r\n  )}.${d.getFullYear()}`\r\n}\r\n\r\nconst getFullTimeStringFromISO = (iso: string): string => {\r\n  const d = new Date(iso)\r\n  return `${addZeroToDate(d.getHours())}:${addZeroToDate(\r\n    d.getMinutes()\r\n  )}:${addZeroToDate(d.getSeconds())}`\r\n}\r\n\r\nconst getFullDateString = (iso: string): string => {\r\n  return `${getFullDateStringFromISO(iso)} ${getFullTimeStringFromISO(iso)}`\r\n}\r\n\r\nexport { getFullDateStringFromISO, getFullTimeStringFromISO, getFullDateString }\r\n","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { getFullDateString } from '../../modules/dates'\r\nimport { IIssueItem } from '../../interfaces/issues'\r\n\r\n// interface IssueItemProps {\r\n//   title: string\r\n//   createdAt: string\r\n//   number: number | string\r\n//   url: string\r\n// }\r\n\r\nconst IssueItem: React.FC<IIssueItem> = ({\r\n  title,\r\n  createdAt,\r\n  number,\r\n  url,\r\n}: IIssueItem) => {\r\n  // const [correctDate, setCorrectDate] = useState('')\r\n  const correctDate = getFullDateString(createdAt)\r\n\r\n  // useEffect(() => {\r\n  //   setCorrectDate(getFullDateString(createdAt))\r\n  // }, [])\r\n\r\n  return (\r\n    <div className=\"issue-item\">\r\n      <div className=\"issue-item_box\">\r\n        <a href={url}>{title}</a>\r\n        <span>Создано: {correctDate}</span>\r\n      </div>\r\n      <div className=\"issue-item_box\">Номер обращения: {number}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { IssueItem }\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n  amountElems: number | null\r\n  perPage: number\r\n  onChange(page: number): void\r\n  active: number\r\n}\r\n\r\nconst Pagination: React.FC<Props> = ({\r\n  amountElems,\r\n  perPage,\r\n  onChange,\r\n  active,\r\n}) => {\r\n  const pageCount: number = amountElems ? Math.ceil(amountElems / perPage) : 0\r\n  const links: number[] = []\r\n\r\n  for (let i = 1; i <= pageCount; i++) {\r\n    links.push(i)\r\n  }\r\n\r\n  const clickHandler = (\r\n    e: React.MouseEvent<HTMLAnchorElement>,\r\n    page: number\r\n  ) => {\r\n    e.preventDefault()\r\n    onChange(page)\r\n  }\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      {links.map((num: number) => (\r\n        <li key={num} className={active === num ? 'active' : undefined}>\r\n          <a\r\n            href={num.toString()}\r\n            onClick={(e) => {\r\n              clickHandler(e, num)\r\n            }}\r\n          >\r\n            {num}\r\n          </a>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport { Pagination }\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DefaultIssuesState } from '../../interfaces/issues'\r\nimport { StatusBar } from '../StatusBar'\r\nimport { IssueItem } from './IssueItem'\r\nimport { Pagination } from './Pagination'\r\n\r\nconst IssuesList: React.FC = () => {\r\n  const issues = useSelector((state: DefaultIssuesState) => state.issues)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const dispatch = useDispatch()\r\n\r\n  // useEffect(() => {\r\n  //   console.log(currentPage)\r\n  // }, [currentPage])\r\n\r\n  const fetchPage = (page: number): void => {}\r\n\r\n  const empty = <p className=\"text-center\">Здесь данных нет :(</p>\r\n\r\n  const needPagination =\r\n    issues.list && issues.totalCount && issues.totalCount > 10\r\n\r\n  return (\r\n    <div className=\"container-medium\">\r\n      <div className=\"issue-list\">\r\n        {issues.list ? (\r\n          issues.list.map((item) => <IssueItem {...item} key={item.number} />)\r\n        ) : issues.loading ? (\r\n          <p className=\"text-center\">Загрузка...</p>\r\n        ) : (\r\n          empty\r\n        )}\r\n      </div>\r\n      {needPagination && (\r\n        <Pagination\r\n          amountElems={issues.totalCount}\r\n          perPage={10}\r\n          onChange={(page) => {\r\n            setCurrentPage(page)\r\n          }}\r\n          active={currentPage}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { IssuesList }\r\n","import React from 'react'\nimport './App.css'\nimport { useEffect } from 'react'\n// import { useState } from 'react';\nimport SearchForm from './view/SearchForm'\nimport { IssuesList } from './view/Issues/IssuesList'\nimport { useSelector } from 'react-redux'\nimport { DefaultIssuesState } from './interfaces/issues'\n// import { showDataNotFound } from './domains/alert'\n// import Home from './view/home/home';\n\nconst App: React.FC = () => {\n  const issueError = useSelector(\n    (state: DefaultIssuesState) => state.issues.error\n  )\n\n  useEffect(() => {\n    // if (issueError)\n    console.log(issueError)\n  }, [issueError])\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">header</header>\n      <SearchForm />\n      <IssuesList />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\n// import { Router, Route, Switch, match } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}