"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var stations = [{
  url: 'http://listen.rusongs.ru:8005/ru-aac-48',
  title: 'Русские песни 1'
}, {
  url: 'http://listen.rusongs.ru:8005/ru-mp3-128',
  title: 'Русские песни 2'
}, {
  url: 'http://dor2server.streamr.ru:8000/dor_64_no',
  title: 'Дорожное радио'
}];
var myMusic = [{
  url: 'assets/other/how_it_ends.mp3',
  title: 'Devotchka - how it ends'
}, {
  url: 'assets/other/be_my_woman.mp3',
  title: 'Be my woman'
}, {
  url: 'assets/other/redtop.mp3',
  title: 'Ivan Reon - redtop'
}];

var Player = /*#__PURE__*/function () {
  function Player(ops) {
    _classCallCheck(this, Player);

    this.$wrapper = document.querySelector(ops.selector);
    this.audio = document.querySelector(ops.selector + ' audio');
    this.controls = {
      $play: document.querySelector(ops.selector + ' .player-play'),
      $prev: document.querySelector(ops.selector + ' .player-prev'),
      $next: document.querySelector(ops.selector + ' .player-next'),
      $volume: document.querySelector(ops.selector + ' .player-volume'),
      $mute: document.querySelector(ops.selector + ' .player-mute'),
      $title: document.querySelector(ops.selector + ' .player-track-name span')
    };
    this.playlist = ops.playlist;
    this.currentTrackIndex = 0;
    this.defaultVolume = 0.03;
    this.isMutted = false;
    this.volumeBeforeMute = 0;
    this.isPlayed = false; // this.correctTime = 0;

    this.setup();
  }

  _createClass(Player, [{
    key: "afterPlay",
    value: function afterPlay() {
      var buffered = this.audio.buffered,
          controller = this.audio.controller,
          crossOrigin = this.audio.crossOrigin,
          currentSrc = this.audio.currentSrc,
          currentTime = this.audio.currentTime,
          duration = this.audio.duration,
          ended = this.audio.ended,
          error = this.audio.error,
          loop = this.audio.loop,
          networkState = this.audio.networkState,
          readyState = this.audio.readyState,
          // sinkId = this.audio.sinkId,
      seekable = this.audio.seekable,
          seeking = this.audio.seeking,
          src = this.audio.src,
          srcObject = this.audio.srcObject,
          textTracks = this.audio.textTracks,
          controls = this.audio.controls; // console.log(buffered);
      // console.log(buffered.start(0));
      // console.log(buffered.end(0));
    }
  }, {
    key: "setup",
    value: function setup() {
      // console.log(this.playlist);
      this.setTrack(0);
      var c = this.controls;
      c.$volume.value = parseInt(this.defaultVolume * 100);
      this.audio.volume = this.defaultVolume;
      var playbackHandler = this.playbackHandler.bind(this, c.$play);
      var volumeHandler = this.volumeHandler.bind(this, c.$volume);
      var muteHandler = this.muteHandler.bind(this, c.$mute);
      var previousTrackHandler = this.previousTrackHandler.bind(this, c.$prev);
      var nextTrackHandler = this.nextTrackHandler.bind(this, c.$next);
      c.$play.addEventListener('click', playbackHandler);
      c.$volume.addEventListener('input', volumeHandler);
      c.$volume.addEventListener('change', volumeHandler);
      c.$mute.addEventListener('click', muteHandler);
      c.$prev.addEventListener('click', previousTrackHandler);
      c.$next.addEventListener('click', nextTrackHandler);
      var audio = this.audio;
      console.log(audio.duration);
      audio.addEventListener('progress', function () {
        console.log('buffered: ' + audio.buffered.end(0));
        console.log('current time: ' + audio.currentTime);
      });
    }
  }, {
    key: "setTrack",
    value: function setTrack(ind) {
      this.currentTrackIndex = ind;
      this.audio.src = this.playlist[this.currentTrackIndex].url;
      this.controls.$title.textContent = this.playlist[this.currentTrackIndex].title;
      if (this.isPlayed) this.play();else this.stop();
    }
  }, {
    key: "previousTrackHandler",
    value: function previousTrackHandler($btn) {
      if (this.currentTrackIndex === 0) {
        this.setTrack(this.playlist.length - 1);
      } else if (this.currentTrackIndex > 0) {
        this.setTrack(this.currentTrackIndex - 1);
      } else {
        throw new Error('Something wrong... (previousTrackHandler)');
      }
    }
  }, {
    key: "nextTrackHandler",
    value: function nextTrackHandler($btn) {
      if (this.currentTrackIndex === this.playlist.length - 1) {
        this.setTrack(0);
      } else if (this.currentTrackIndex < this.playlist.length - 1) {
        this.setTrack(this.currentTrackIndex + 1);
      } else {
        throw new Error('Something wrong... (nextTrackHandler)');
      }
    }
  }, {
    key: "getCorrectDuration",
    value: function getCorrectDuration() {
      var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'full';
      var minutes = Math.floor(parseInt(this.audio.duration) / 60);
      var seconds = parseInt(this.audio.duration) % 60;
      var full = "".concat(minutes, ":").concat(seconds);
      if (arg == 'minute' || arg == 'minutes') return minutes;else if (arg == 'second' || arg == 'seconds') return seconds;else if (arg == 'raw') return this.audio.duration;else return full;
    }
  }, {
    key: "playbackHandler",
    value: function playbackHandler($btn) {
      if (!this.isPlayed) {
        this.play();
      } else {
        this.stop();
      }

      this.afterPlay();
      this.isPlayed = !this.isPlayed;
    }
  }, {
    key: "volumeHandler",
    value: function volumeHandler($input) {
      this.audio.volume = parseInt($input.value) / 100; // console.log(this.audio.volume);
    }
  }, {
    key: "muteHandler",
    value: function muteHandler() {
      if (this.isMutted) this.unmute();else this.mute();
      this.isMutted = !this.isMutted;
    }
  }, {
    key: "play",
    value: function play() {
      this.controls.$play.classList.remove('stopped');
      this.audio.play();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.controls.$play.classList.add('stopped');
      this.audio.pause();
    }
  }, {
    key: "mute",
    value: function mute() {
      this.volumeBeforeMute = this.audio.volume;
      this.audio.volume = 0;
      this.controls.$volume.value = 0;
      this.controls.$mute.classList.add('active');
    }
  }, {
    key: "unmute",
    value: function unmute() {
      this.audio.volume = this.volumeBeforeMute;
      this.controls.$volume.value = parseInt(this.volumeBeforeMute * 100);
      this.volumeBeforeMute = 0;
      this.controls.$mute.classList.remove('active');
    }
  }]);

  return Player;
}();

var isEventSupported = function () {
  var TAGNAMES = {
    'select': 'input',
    'change': 'input',
    'submit': 'form',
    'reset': 'form',
    'error': 'img',
    'load': 'img',
    'abort': 'img'
  };

  function isEventSupported(eventName) {
    var el = document.createElement(TAGNAMES[eventName] || 'div');
    eventName = 'on' + eventName;
    var isSupported = (eventName in el);

    if (!isSupported) {
      el.setAttribute(eventName, 'return;');
      isSupported = typeof el[eventName] == 'function';
    }

    el = null;
    return isSupported;
  }

  return isEventSupported;
}();

var myPlayer = new Player({
  selector: '#myPlayer',
  playlist: stations
});
//# sourceMappingURL=maps/main.min.js.map
