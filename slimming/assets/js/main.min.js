// var problemsOutput = document.querySelector('#problemsCount');
// var problemsSlider = document.querySelector('.problems__list');
var problemsSlider = new Splide('.splide-problems', {
    loop: false,
    perPage: 2,
    arrows: false,
    gap: 20,
    padding: 20,
    drag: true,
    swipeDistanceThreshold: 10,
    pagination: true,
    breakpoints: {
        2560: {
            pagination: false,
            drag: false,
            perPage: 5,
        },
        1070: {
            perPage: 4,
        },
        860: {
            perPage: 3,
        },
        767: {
            gap: 12,
            fixedWidth: '210px',
        },
        479: {
            focus: true,
            fixedWidth: '210px',
        }
        
    }
});
problemsSlider.on('drag', function() {
    var cards = document.querySelectorAll('.splide-problems .problems-card');
    for (var i = 0; i < cards.length; i++) {
        cards[i].classList.add('is-shadow');
    }
});
problemsSlider.on('dragged', function() {
    var cards = document.querySelectorAll('.splide-problems .problems-card');
    for (var i = 0; i < cards.length; i++) {
        removeShadow(cards[i]);
    }
    function removeShadow(elem) {
        setTimeout(function() {
            elem.classList.remove('is-shadow');
        }, 500);
    }
});
var resultsSlider = new Splide('.splide-results', {
    loop: false,
    perPage: 2,
    perMove: 2,
    pagination: true,
    arrows: true,
    gap: 30,
    padding: 20,
});
if (window.innerWidth < 768) {
    resultsSlider.destroy();
} else {
    resultsSlider.on('drag', function() {
        var cards = document.querySelectorAll('.splide-results .results-card');
        for (var i = 0; i < cards.length; i++) {
            cards[i].classList.add('is-shadow');
        }
    });
    resultsSlider.on('dragged', function() {
        var cards = document.querySelectorAll('.splide-results .results-card');
        for (var i = 0; i < cards.length; i++) {
            removeShadow(cards[i]);
        }
        function removeShadow(elem) {
            setTimeout(function() {
                elem.classList.remove('is-shadow');
            }, 500);
        }
    });
}
var themesSlider = new Splide('.splide-themes', {
    loop: false,
    perPage: 5,
    // perMove: 2,
    pagination: true,
    arrows: true,
    gap: 20,
    padding: 20,
    breakpoints: {
        1023: {
            perPage: 4,
        },
        767: {
            perPage: 3,
        },
        479: {
            perPage: 2,
            fixedWidth: '110px',
            gap: 10
        }
    }
});
themesSlider.on('drag', function() {
    var cards = document.querySelectorAll('.splide-themes .themes-card');
    for (var i = 0; i < cards.length; i++) {
        cards[i].classList.add('is-shadow');
    }
});
themesSlider.on('dragged', function() {
    var cards = document.querySelectorAll('.splide-themes .themes-card');
    for (var i = 0; i < cards.length; i++) {
        removeShadow(cards[i]);
    }
    function removeShadow(elem) {
        setTimeout(function() {
            elem.classList.remove('is-shadow');
        }, 500);
    }
});
var reviewsSlider = new Splide('.splide-reviews', {
    loop: false,
    perPage: 3,
    perMove: 1,
    clones: 0,
    pagination: true,
    arrows: true,
    gap: 22,
    padding: 20,
    breakpoints: {
        1023: {
            perPage: 2,
        },
        650: {
            perPage: 1,
        }
    }
});
reviewsSlider.on('drag', function() {
    var cards = document.querySelectorAll('.splide-reviews .reviews-card');
    for (var i = 0; i < cards.length; i++) {
        cards[i].classList.add('is-shadow');
    }
});
reviewsSlider.on('dragged', function() {
    var cards = document.querySelectorAll('.splide-reviews .reviews-card');
    for (var i = 0; i < cards.length; i++) {
        removeShadow(cards[i]);
    }
    function removeShadow(elem) {
        setTimeout(function() {
            elem.classList.remove('is-shadow');
        }, 500);
    }
});
var newsSlider = new Splide('.splide-news', {
    loop: false,
    perPage: 1,
    perMove: 1,
    pagination: true,
    arrows: true,
    // gap: 22,
});
problemsSlider.mount();
resultsSlider.mount();
themesSlider.mount();
reviewsSlider.mount();
newsSlider.mount();



var burger = document.querySelector('#burger');
var headerMenu = document.querySelector('.header__bottom');
burger.addEventListener('click', function() {
    if (burger.classList.contains('active')) {
        hideMenu();
    } else {
        showMenu();
    }
});
function showMenu() {
    burger.classList.add('active');
    headerMenu.classList.add('active');
}
function hideMenu() {
    burger.classList.remove('active');
    headerMenu.classList.remove('active');
}

var headerMenuItems = document.querySelectorAll('.header .menu__link');
var footerMenuItems = document.querySelectorAll('.footer__nav-link');
for (var i = 0; i < headerMenuItems.length; i++) {
    var elem = headerMenuItems[i];
    var handler = scrollHandler.bind(null, elem);
    elem.addEventListener('click', handler);
}
for (var i = 0; i < footerMenuItems.length; i++) {
    var elem = footerMenuItems[i];
    var handler = scrollHandler.bind(null, elem);
    elem.addEventListener('click', handler);
}

function scrollHandler(elem) {
    var href = elem.getAttribute('href').substr(1);
    event.preventDefault();
    document.getElementById(href).scrollIntoView({block: "start", behavior: "smooth"});
}

var problems = {
    cards: document.querySelectorAll('.problems-card'),
    labels: document.querySelectorAll('.problems-card__cb'),
    checkboxes: document.querySelectorAll('.problems-card__cb input'),
    btn: document.querySelector('#problemsBtn'),
    info: document.querySelector('#problemsInfo'),
    output: document.querySelector('#problemsCount'),
    title: document.querySelector('.problems__title'),
    outputString: ' проблем',
    checkedCount: 0,
};
problems.defaultTitleContent = problems.title.innerHTML;
problems.readyTitleContent = problems.title.getAttribute('data-ready-text');

for (var i = 0; i < problems.cards.length; i++) {
    var handler = problemsHandler.bind(null, i);
    problems.checkboxes[i].addEventListener('change', handler);
    var selectCb = selectCheckbox.bind(null, i);
    problems.cards[i].addEventListener('click', selectCb);
}
function selectCheckbox(ind) {
    if (event.target !== problems.labels[ind]) {
        problems.checkboxes[ind].click();
    }
}
function problemsHandler(ind) {
    if (problems.checkboxes[ind].checked) {
        problems.checkedCount++;
        problems.labels[ind].classList.add(getCheckedProblemsClassName());
    } else {
        problems.checkedCount--;
        problems.labels[ind].classList.remove(getCheckedProblemsClassName());
    }
    showProblemsCount();
}
function getCheckedProblemsClassName() {
    var className;
    if (problems.checkedCount < 3) {
        for (var j = 0; j < problems.labels.length; j++) {
            if (problems.labels[j].classList.contains('done')) {
                problems.labels[j].classList.remove('done');
                problems.labels[j].classList.add('active');
            }
        }
        className = 'active';
        problemsChangeState(false);
        toggleTitleContent('default');
    } else if (problems.checkedCount >= 3) {
        for (var j = 0; j < problems.labels.length; j++) {
            if (problems.labels[j].classList.contains('active')) {
                problems.labels[j].classList.remove('active');
                problems.labels[j].classList.add('done');
            }
        }
        className = 'done';
        problemsChangeState(true);
        toggleTitleContent('ready');
    } 
    toggleProblemsOutputClassName();
    return className;
}
function toggleTitleContent(state) {
    if (state === 'default') {
        problems.title.innerHTML = problems.defaultTitleContent;
        problems.title.classList.remove('ready');
    } else if (state === 'ready') {
        problems.title.innerHTML = problems.readyTitleContent;
        problems.title.classList.add('ready');
    }
}
function showProblemsCount() {
    switch (problems.checkedCount) {
        case 1:
            problems.outputString = ' проблема.';
            break;
        case 2:
        case 3:
        case 4:
            problems.outputString = ' проблемы.';
            break;
        default:
            problems.outputString = ' проблем.';
            break;
    }
    problems.output.textContent = problems.checkedCount + problems.outputString;
}
function toggleProblemsOutputClassName() {
    if (problems.checkedCount > 0) {
        problems.output.parentElement.classList.add('not-zero');
    } else {
        problems.output.parentElement.classList.remove('not-zero');
    }
}
function problemsChangeState(isReady) {
    if (isReady) {
        problems.info.classList.add('hidden');
        problems.btn.classList.remove('hidden');
        problems.title.classList.add('ready');
    } else {
        problems.btn.classList.add('hidden');
        problems.info.classList.remove('hidden');
        problems.title.classList.remove('is-ready');
    }
}

var quiz = {
    answers: document.querySelectorAll('.quiz__answer'),
    radio: document.querySelectorAll('.quiz__answer input'),
    labels: document.querySelectorAll('.quiz__radio-label'),
};
radioHandler(quiz.answers, quiz.radio);

function radioHandler(itemList, radioList) {
    for (var i = 0; i < itemList.length; i++) {
        var select = selectRadio.bind(null, i);
        var handler = selectItem.bind(null, i);
        itemList[i].addEventListener('click', select);
        itemList[i].addEventListener('change', handler);
    }
    function selectItem(ind) {
        for (var j = 0; j < itemList.length; j++) {
            itemList[j].classList.remove('checked');
        }
        itemList[ind].classList.add('checked');
    }
    function selectRadio(ind) {
        radioList[ind].checked = true;
        selectItem(ind);
    }
}

var request = {
    checkbox: document.querySelector('#request .request__cb'),
    label: document.querySelector('#request .request__policy-label'),
};
request.checkbox.addEventListener('change', function() {
    if (request.checkbox.checked) {
        request.label.classList.add('checked');
    } else {
        request.label.classList.remove('checked');
    }
});



var results = {
    btn: document.querySelector('#moreResults'),
    cards: document.querySelectorAll('.results-card'),
    isHidden: false,
    visibleCount: 2,
    cardTexts: [],
};
for (var i = 0; i < results.cards.length; i++) {
    var textElem = results.cards[i].querySelector('.results-card__text');
    results.cardTexts.push(textElem.textContent);
}
function showOrHideMoreResults(visibleCount = 0) {
    if (results.isHidden) {
        for (var i = 0; i < results.cards.length; i++) {
            results.cards[i].classList.remove('hidden');
            results.btn.textContent = 'скрыть';
        }
    } else {
        for (var i = visibleCount; i < results.cards.length; i++) {
            results.cards[i].classList.add('hidden');
            results.btn.textContent = 'показать еще';
        }
    }
    results.isHidden = !results.isHidden;
}
function expandCard(ind) {
    var textElem = results.cards[ind].querySelector('.results-card__text');
    var text = results.cardTexts[ind];
    insertTextInCard(text, textElem);
    results.cards[ind].classList.remove('closed');
    results.cards[ind].classList.add('opened');
}
function rollUpCard(ind) {
    var textElem = results.cards[ind].querySelector('.results-card__text');
    var length = textElem.getAttribute('data-cutted-length');
    var cuttedText = results.cardTexts[ind].split(' ').slice(0, length - 2).join(' ') + ' ...';
    insertTextInCard(cuttedText, textElem);
    results.cards[ind].classList.remove('opened');
    results.cards[ind].classList.add('closed');
}
function insertTextInCard(text, textElem) {
    var span = document.createElement('span');
    span.textContent = text;
    textElem.innerHTML = '';
    textElem.appendChild(span);
}
function setupCardContent(ind) {
    var textElem = results.cards[ind].querySelector('.results-card__text');
    var result = checkStringLength(5, ind, textElem);
    if (result.isMore) {
        textElem.setAttribute('data-cutted-length', result.length);
        results.cards[ind].classList.add('closed');
    }
}
function checkStringLength(num, ind, textElem) {
    var text = results.cardTexts[ind];
    var textArr = text.split(' ');
    var resultText = '';

    var span = document.createElement('span');
    for (var k = 0; k < textArr.length; k++) {
        resultText += textArr[k] + ' ';
        textElem.innerHTML = '';
        span.textContent = resultText;
        textElem.appendChild(span);
        if (span.getClientRects().length >= num) {
            span.textContent = text;
            textElem.innerHTML = '';
            textElem.appendChild(span);
            return {
                isMore: true,
                length: k
            };
        }
    }
    return {
        isMore: false,
        length: k
    };
}
function expandAllCards() {
    for (var i = 0; i < results.cards.length; i++) {expandCard(i);}
}
function rollUpAllCards() {
    for (var i = 0; i < results.cards.length; i++) {rollUpCard(i);}
}
function cardContentHandler(ind) {
    if (results.cards[ind].classList.contains('closed')) {
        expandCard(ind);
    } else if (results.cards[ind].classList.contains('opened')) {
        rollUpCard(ind);
    }
}
if (window.innerWidth < 768) {
    for (var i = 0; i < results.cards.length; i++) {
        setupCardContent(i);
        if (results.cards[i].querySelector('.results-card__text').hasAttribute('data-cutted-length')) {
            var cardHandler = cardContentHandler.bind(null, i);
            results.cards[i].addEventListener('click', cardHandler);
            rollUpCard(i);
        }
    }
    results.btn.addEventListener('click', showOrHideMoreResults.bind(null, results.visibleCount));
    showOrHideMoreResults(2);
}
//# sourceMappingURL=maps/main.min.js.map
