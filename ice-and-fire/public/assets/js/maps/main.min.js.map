{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["const pageNames = {\r\n    product: 'product',\r\n    catalog: 'catalog',\r\n    index: 'index'\r\n};\r\n\r\nfunction markActivePage() {\r\n    const path = window.location.pathname;\r\n    const navMenuLinks = document.querySelectorAll('.nav-list .nav-list__item a');\r\n    navMenuLinks.forEach(function(el) {\r\n        const href = el.getAttribute('href');\r\n        path.match(href) ? el.closest('.nav-list__item').classList.add('current') : void (0);\r\n        if ((path === '' || path === '/') && (href.indexOf('index') > -1)) {el.closest('.nav-list__item').classList.add('current')}\r\n    });\r\n}\r\n\r\nfunction nodeExist(selector) {\r\n    return document.querySelector(selector) !== null;\r\n}\r\nfunction getNewNode({tag = 'div', classList = '', attrs = {}, html, text}) {\r\n    const elem = document.createElement(tag);\r\n    elem.classList = classList;\r\n    for (let key in attrs) {\r\n        elem.setAttribute(key, attrs[key]);\r\n    }\r\n    if (html) {elem.innerHTML = html}\r\n    if (text) {elem.innerText = text}\r\n    return elem;\r\n}\r\n\r\nclass Tabs {\r\n    constructor({tabsSelector, tabSelector, onInit, withContent, initialTab}) {\r\n        this.selector = tabsSelector || '.tabs';\r\n        this.tabSelector = tabSelector || '.tabs__item';\r\n        // this.tabsWrapperSelector = tabsWrapperSelector;\r\n        this.tabs = document.querySelectorAll(this.selector + ' ' + this.tabSelector);\r\n        this.inputs = document.querySelectorAll(this.selector + ' input');\r\n        this.initialTab = initialTab || 0;\r\n        this.contents = null;\r\n        this.withContent = withContent || false;\r\n        this.data = {\r\n            activeIdx: null,\r\n            activeValue: null\r\n        };\r\n        this.isInit = false;\r\n        this.onInit = onInit ? onInit.bind(this) : function(){return false};\r\n        this.setup();\r\n    }\r\n    resetTabs() {\r\n        this.tabs.forEach(function(el) {\r\n            el.classList.remove('active');\r\n        });\r\n    }\r\n    _onInit() {\r\n        if (this.onInit()) {\r\n            this.onInit();\r\n        }\r\n    }\r\n    setupContent() {\r\n        if (this.withContent) {\r\n            this.contents = document.querySelectorAll('[data-content-for-tab]');\r\n        }\r\n    }\r\n    resetContents() {\r\n        this.inputs.forEach(function(el) {\r\n            const name = el.getAttribute('value');\r\n            const content = document.querySelector('[data-content-for-tab=\"'+ name +'\"]');\r\n            content.classList.remove('active');\r\n        });\r\n    }\r\n    setContent(name) {\r\n        this.resetContents();\r\n        const content = document.querySelector('[data-content-for-tab=\"'+ name +'\"]');\r\n        content.classList.add('active');\r\n    }\r\n    setup() {\r\n        if (document.querySelector(this.selector) !== null) {\r\n            this.inputs.forEach((el, idx) => {\r\n                el.addEventListener('change', (e) => {\r\n                    this.data = {activeIdx:idx, activeValue:el.value};\r\n                    this.resetTabs();\r\n                    this.tabs[idx].classList.add('active');\r\n                    if (this.withContent) {\r\n                        this.setContent(el.getAttribute('value'));\r\n                    }\r\n                });\r\n            });\r\n            this.tabs[this.initialTab].classList.add('active');\r\n            this.inputs[this.initialTab].checked = true;\r\n            if (this.withContent) {this.setContent(this.inputs[this.initialTab].getAttribute('value'))}\r\n            this.isInit = true;\r\n            this._onInit();\r\n        }\r\n    }\r\n}\r\n\r\nclass MenuCatalog {\r\n    constructor({menuSelector}) {\r\n        this.menuSelector = menuSelector;\r\n        this.menuRoot = document.querySelector(menuSelector);\r\n        this.menuBtn = this.menuRoot.querySelector('a');\r\n        this.setup();\r\n    }\r\n    setup() {\r\n        if (this.menuRoot !== null) {\r\n            const root = this.menuRoot;\r\n            const btn = this.menuBtn;\r\n            const selector = this.menuSelector;\r\n\r\n            root.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n                if (e.target.closest('a') === btn) {\r\n                    root.classList.contains('active') ?\r\n                        root.classList.remove('active') :\r\n                        root.classList.add('active');\r\n                }\r\n\r\n            });\r\n            document.addEventListener('click', function(e) {\r\n                if (e.target.closest(selector) !== root) {\r\n                    root.classList.remove('active');\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nclass ProductCards {\r\n    constructor({cardSelector}) {\r\n        this.cardSelector = cardSelector;\r\n        this.cardElems = document.querySelectorAll(this.cardSelector);\r\n        if (this.cardElems.length > 0) {\r\n            this.setup();\r\n        }\r\n    }\r\n    addToCartHandler() {\r\n\r\n    }\r\n    _setupSaleLabels() {\r\n        this.cardElems.forEach(el => {\r\n            if (el.classList.contains('sale')) {\r\n                const label = getNewNode({\r\n                    classList: 'product-card__sale-label',\r\n                    attrs: {\r\n                        'data-tooltip': 'Товар со скидкой',\r\n                        'data-side': 'right',\r\n                    }\r\n                });\r\n                el.appendChild(label);\r\n            }\r\n        });\r\n    }\r\n    _setupAddBtnAction() {\r\n        this.cardElems.forEach((el, idx) => {\r\n            const addBtn = el.querySelector(this.cardSelector + '__add');\r\n            addBtn.onclick = () => {el.classList.toggle('in-cart')};\r\n        });\r\n    }\r\n    setup() {\r\n        this._setupAddBtnAction();\r\n        this._setupSaleLabels();\r\n    }\r\n}\r\n\r\nclass SearchField {\r\n    constructor({formSelector}) {\r\n        this.formSelector = formSelector;\r\n        this.form = document.querySelector(formSelector);\r\n        this.input = document.querySelector(formSelector + ' input');\r\n        this.btn = document.querySelector(formSelector + ' button');\r\n        this.isInit = false;\r\n        this.state = null;\r\n        this.inputPlaceholder = null;\r\n        this.text = '';\r\n        this.setup();\r\n    }\r\n    openForm() {\r\n        this.form.classList.remove('close');\r\n        this.form.classList.add('open');\r\n    }\r\n    closeForm() {\r\n        this.form.classList.remove('open');\r\n        this.form.classList.add('close');\r\n    }\r\n    btnHandler(e) {\r\n        if (!this.text) {\r\n            e.preventDefault();\r\n            if (this.state === 'open') {\r\n                this.state = 'close';\r\n                this.closeForm();\r\n            } else if (this.state === 'close') {\r\n                this.state = 'open';\r\n                this.openForm();\r\n            }\r\n        } else {\r\n            alert('Имитация поиска товара по запросу: ' + this.text);\r\n            this.form.submit();\r\n        }\r\n    }\r\n    inputHandler(e) {\r\n        this.text = e.target.value;\r\n        // if (!this.text && e.key === 'Enter') {\r\n        //     e.preventDefault();\r\n        // } else if (this.text && e.key === 'Enter') {\r\n        //     alert('Имитация поиска товара по запросу: ' + this.text);\r\n        // }\r\n    }\r\n    setup() {\r\n        if (this.form && this.input && this.btn) {\r\n            this.state = 'close';\r\n            this.inputPlaceholder = this.input.getAttribute('placeholder');\r\n            const btnHandler = this.btnHandler.bind(this);\r\n            const inputHandler = this.inputHandler.bind(this);\r\n            // const formHandler = this.formHandler.bind(this);\r\n            this.btn.addEventListener('click', function(e) {btnHandler(e)});\r\n            this.input.addEventListener('input', function(e) {inputHandler(e)});\r\n            this.form.addEventListener('submit', (e) => {\r\n                if (!this.text) {\r\n                    e.preventDefault();\r\n                } else {\r\n                    alert('Имитация поиска товара по запросу: ' + this.text);\r\n                }\r\n            });\r\n\r\n            this.isInit = true;\r\n        } else {\r\n            console.error('SearchField not inited. Some of elements not found');\r\n        }\r\n    }\r\n}\r\n\r\nclass Filter {\r\n    constructor(selector, {classnames}) {\r\n        this.selector = selector;\r\n        this.el = document.querySelector(this.selector);\r\n        this.cn = classnames;\r\n        if (this.el) {\r\n            this.titles = this.el.querySelectorAll(this.cn.titles);\r\n            this.cats = this.el.querySelectorAll(this.cn.cats);\r\n            this.priceInputs = this.el.querySelectorAll('input[name^=price]');\r\n            this.btnsReset = this.el.querySelectorAll('button[name=reset]');\r\n        }\r\n        if (this.el && nodeExist('.btn-up a[href=\"#' + this.el.getAttribute('id') + '\"]')) {\r\n            this.btnUp = document.querySelector('.btn-up');\r\n        }\r\n        this.btnUpIsShown = false;\r\n        /* данные */\r\n        this.price = [0, 0];\r\n        this.price.reset = function() {\r\n            this[0] = 0;\r\n            this[1] = 0;\r\n        };\r\n        this.brands = new Set();\r\n        this.brands.reset = function() {this.clear()}\r\n        /* ====== */\r\n\r\n        if (this.el) {\r\n            this.setup();\r\n        }\r\n    }\r\n    checkClosestLi(child) {\r\n        child.closest('li').classList.add('checked');\r\n    }\r\n    uncheckClosestLi(child) {\r\n        child.closest('li').classList.remove('checked');\r\n    }\r\n    toggleBtnReset(cat, show) {\r\n        const btn = cat.querySelector('button[name=reset]');\r\n        show ? btn.classList.add('shown') : btn.classList.remove('shown');\r\n    }\r\n    _validateDecimal(nodes) {\r\n        /* валидация нажатой кнопки на соответствие цифре или кнопке управления (напр. tab или стрелка) */\r\n        const validCodes = [\r\n            8,9,\r\n            37,38,39,40,\r\n            48,49,50,51,52,53,54,55,56,57,\r\n            96,97,98,99,100,101,102,103,104,105\r\n        ];\r\n        nodes.forEach(el => {\r\n            el.addEventListener('keydown', e => {\r\n                if (!validCodes.includes(e.keyCode)) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    _setupPriceInputs() {\r\n        /* сохранение введенных данных в массиве */\r\n        this.priceInputs.forEach(input => {\r\n            input.addEventListener('input', e => {\r\n                const t = e.target;\r\n                if (parseInt(t.value) === 0) {t.value = '0'}\r\n                const name = t.getAttribute('name');\r\n                switch (name) {\r\n                    case 'price-from':\r\n                        this.price[0] = +t.value;\r\n                        break;\r\n                    case 'price-to':\r\n                        this.price[1] = +t.value;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                const willShowBtn = (this.price[0] || this.price[1]);\r\n                this.toggleBtnReset(el.closest('.filter__cat'), willShowBtn);\r\n            });\r\n        });\r\n    }\r\n    _setupTitles() {\r\n        this.titles.forEach((el, idx) => {\r\n            el.addEventListener('click', e => {\r\n                if (e.target === el || e.target === el.querySelector('span')) {\r\n                    this.cats[idx].classList.toggle('hidden');\r\n                }\r\n            });\r\n        });\r\n    }\r\n    _setupBtnsReset() {\r\n        this.btnsReset.forEach(btn => {\r\n            btn.addEventListener('click', e => {\r\n                const catName = e.target.getAttribute('value');\r\n                const inputs = this.el.querySelectorAll('.filter__cat[data-filter-cat=' + catName + '] input');\r\n                e.preventDefault();\r\n                inputs.forEach(input => {\r\n                    const type = input.getAttribute('type');\r\n                    switch (type) {\r\n                        case 'text':\r\n                        case 'number':\r\n                        case 'search':\r\n                            input.value = '';\r\n                            break;\r\n                        case 'checkbox':\r\n                        case 'radio':\r\n                            if (input.getAttribute('name') === 'brands') {\r\n                                this.deleteAllBrands();\r\n                            } else {\r\n                                input.checked = false;\r\n                            }\r\n                            this.uncheckClosestLi(input);\r\n                            this.showClosestLi(input);\r\n                        default:\r\n                            break;\r\n                    }\r\n                });\r\n                this[catName].reset();\r\n                this.toggleBtnReset(btn.closest('.filter__cat'), false);\r\n            });\r\n        });\r\n    }\r\n    _setupOtherCats() {\r\n        this.cats.forEach(cat => {\r\n            const catName = cat.getAttribute('data-filter-cat');\r\n            if (catName !== 'brands' && catName !== 'price') {\r\n                this[catName] = new Set();\r\n                this[catName].reset = function() {this.clear()};\r\n                \r\n                const inputs = cat.querySelectorAll('input');\r\n                if (inputs[0].getAttribute('type') === 'checkbox') {\r\n                    this._setupOtherInputsCb(inputs, catName);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    _setupOtherInputsCb(inputs, catName) {\r\n        inputs.forEach(input => {\r\n            input.addEventListener('change', e => {\r\n                if (input.checked) {\r\n                    this[catName].add(input.value);\r\n                    this.checkClosestLi(input);\r\n                } else {\r\n                    this[catName].delete(input.value);\r\n                    this.uncheckClosestLi(input);\r\n                }\r\n                // input.checked ?\r\n                //     this[catName].add(input.value) :\r\n                //     this[catName].delete(input.value);\r\n                const willShowBtn = this[catName].size > 0;\r\n                this.toggleBtnReset(input.closest('.filter__cat'), willShowBtn);\r\n            });\r\n        });\r\n    }\r\n    showClosestLi(child) {\r\n        child.closest('li').classList.remove('hidden');\r\n    }\r\n    hideClosestLi(child) {\r\n        child.closest('li').classList.add('hidden');\r\n    }\r\n    _setupBrands() {\r\n        const catElem = this.el.querySelector('[data-filter-cat=brands]');\r\n        if (catElem) {\r\n            const searchInput = catElem.querySelector('input[name=brand-search]');\r\n            const checkboxes = catElem.querySelectorAll('input[type=checkbox]');\r\n            // Поле поиска\r\n            searchInput.addEventListener('input', e => {\r\n                const t = e.target;\r\n                const text = t.value;\r\n                checkboxes.forEach(cb => {\r\n                    cb.getAttribute('value').toLowerCase().includes(text.toLowerCase()) ?\r\n                        this.showClosestLi(cb) :\r\n                        this.hideClosestLi(cb);\r\n                });\r\n            });\r\n    \r\n            // Обработка чекбоксов\r\n            checkboxes.forEach(input => {\r\n                input.addEventListener('change', e => {\r\n                    const val = input.getAttribute('value');\r\n                    if (input.checked) {\r\n                        this.addBrand(val);\r\n                        this.checkClosestLi(input);\r\n                    } else {\r\n                        this.deleteBrand(val);\r\n                        this.uncheckClosestLi(input);\r\n                    }\r\n                    // input.checked ? this.addBrand(val) : this.deleteBrand(val);\r\n                    const willShowBtn = this.brands.size > 0;\r\n                    this.toggleBtnReset(catElem, willShowBtn);\r\n\r\n                });\r\n            });\r\n        }\r\n    }\r\n    addBrand(val) {\r\n        const tagsContainer = document.querySelector('.catalog__brand-tags');\r\n        const tag = this._getBrandTag(val);\r\n        tagsContainer.append(tag);\r\n        this.brands.add(val);\r\n    }\r\n    deleteBrand(val) {\r\n        const input = document.querySelector('[data-filter-cat=brands] input[value=\"' + val + '\"]');\r\n        const tag = document.querySelector('.catalog__brand-tag[data-brand=\"' + val + '\"]');\r\n        input.checked = false;\r\n        tag.remove();\r\n        this.brands.delete(val);\r\n        if (this.brands.size === 0) {\r\n            this.toggleBtnReset(input.closest('.filter__cat'), false);\r\n        }\r\n    }\r\n    deleteAllBrands() {\r\n        const brands = document.querySelectorAll('.catalog__brand-tag');\r\n        brands.forEach(brand => {\r\n            this.deleteBrand(brand.getAttribute('data-brand'));\r\n        });\r\n    }\r\n    _getBrandTag(val) {\r\n        const tag = getNewNode({\r\n            classList: 'catalog__brand-tag',\r\n            attrs: {'data-brand': val}\r\n        });\r\n        const btn = getNewNode({\r\n            tag: 'button',\r\n            classList: 'catalog__brand-delete',\r\n            attrs: {'type': 'button'},\r\n            html: '&#10006'\r\n        });\r\n        const span = getNewNode({\r\n            tag: 'span',\r\n            text: val,\r\n        });\r\n        tag.append(btn, span);\r\n        btn.addEventListener('click', e => {\r\n            this.deleteBrand(val);\r\n        });\r\n        return tag;\r\n    }\r\n    _showBtnUp() {\r\n        this.btnUp.style.display = 'block';\r\n        this.btnUp.classList.remove('hiding');\r\n        this.btnUp.classList.add('showing');\r\n        this.btnUpIsShown = true;\r\n        clearTimeout(this.btnShowTimeout);\r\n        this.btnShowTimeout = setTimeout(() => {\r\n            this.btnUp.classList.remove('showing');\r\n        }, 250);\r\n    }\r\n    _hideBtnUp() {\r\n        this.btnUp.classList.remove('showing');\r\n        this.btnUp.classList.add('hiding');\r\n        this.btnUpIsShown = false;\r\n        clearTimeout(this.btnShowTimeout);\r\n        this.btnShowTimeout = setTimeout(() => {\r\n            this.btnUp.style.display = '';\r\n            this.btnUp.classList.remove('hiding');\r\n        }, 250);\r\n    }\r\n    _setupBtnUp() {\r\n        if (this.btnUp) {\r\n            /* клик по кнопке \"к фильтру\" */\r\n            const anchor = this.btnUp.querySelector('a[href=\"#filter\"]');\r\n            const path = anchor.getAttribute('href');\r\n            anchor.addEventListener('click', e => {\r\n                e.preventDefault();\r\n                document.querySelector(path).scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n            });\r\n            /* плавное появление и скрытие кнопки \"к фильтру\" при скролле */\r\n            const filterRect = this.el.getBoundingClientRect();\r\n            const activePos = filterRect.bottom + pageYOffset;\r\n            window.addEventListener('scroll', e => {\r\n                if (pageYOffset >= activePos && !this.btnUpIsShown) {\r\n                    this._showBtnUp();\r\n                } else if (pageYOffset < activePos && this.btnUpIsShown) {\r\n                    this._hideBtnUp();\r\n                }\r\n            });\r\n        }\r\n   }\r\n   getData(set) {\r\n       return Array.from(set);\r\n   }\r\n    setup() {\r\n        this._setupTitles();\r\n        this._setupPriceInputs();\r\n        this._setupBrands();\r\n        this._setupOtherCats();\r\n\r\n        this._validateDecimal(this.priceInputs);\r\n        this._setupBtnsReset();\r\n        this._setupBtnUp();\r\n\r\n        // this.checkBoxes.forEach(el => {\r\n        //     el.addEventListener('change', e => {\r\n        //         this.touch();\r\n        //     });\r\n        // });\r\n        \r\n\r\n    }\r\n}\r\n\r\nclass Tooltips {\r\n    constructor({offsetX, offsetY}) {\r\n        this.elems = document.querySelectorAll('[data-tooltip]');\r\n        this.offsetX = offsetX || 5;\r\n        this.offsetY = offsetY || 15;\r\n        if (this.elems.length > 0) {\r\n            this.setup();\r\n        }\r\n    }\r\n    getTooltip(parent) {\r\n        const text = parent.getAttribute('data-tooltip');\r\n        const side = parent.getAttribute('data-side');\r\n        const tooltip = getNewNode({\r\n            text: text,\r\n            classList: 'tooltip',\r\n        });\r\n        if (side) {tooltip.classList.add('tooltip--' + side)}\r\n        return tooltip;\r\n    }\r\n    getTooltipPosition(parent) {\r\n        const rect = parent.getBoundingClientRect();\r\n        const x = Math.round(rect.left);\r\n        const y = Math.round(rect.top + window.scrollY + rect.height + this.offsetY);\r\n        return {x, y};\r\n    }\r\n    setup() {\r\n        this.elems.forEach(el => {\r\n            let tooltip = this.getTooltip(el);\r\n            el.addEventListener('mouseenter', e => {\r\n                const {x, y} = {...this.getTooltipPosition(el)};\r\n                tooltip.style.left = x + 'px';\r\n                tooltip.style.top = y + 'px';\r\n                document.body.appendChild(tooltip);\r\n            });\r\n            el.addEventListener('mouseleave', e => {\r\n                document.body.removeChild(tooltip);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const catalogFilter = new Filter('#filter', {\r\n        classnames: {\r\n            cats: '.filter__cat',\r\n            titles: '.filter__cat-title',\r\n        }\r\n    });\r\n\r\n    const pagePath = window.location.pathname;\r\n    markActivePage();\r\n    for (let key in pageNames) {\r\n        const res = pagePath.match(pageNames[key]);\r\n        if (res) {document.body.classList.add(res[0] + '-page')}\r\n    }\r\n\r\n    const headerSearchField = new SearchField({\r\n        formSelector: '.header .actions__search'\r\n    });\r\n\r\n    const productsTabs = new Tabs({\r\n        tabsSelector: '.products__category-tabs',\r\n        tabSelector: '.products__category-tab',\r\n    });\r\n    const productsGridTabs = new Tabs({\r\n        tabsSelector: '.products__type-tabs',\r\n        tabSelector: '.products__type-tab',\r\n    });\r\n\r\n    const productCardInfoTabs = new Tabs({\r\n        tabsSelector: '.product__info-tabs',\r\n        withContent: true,\r\n        // contentBoxSelector: '.product__info-content-box'\r\n    });\r\n    const deliveryTabs = new Tabs({\r\n        tabsSelector: '.delivery__info-tabs',\r\n        withContent: true,\r\n        // contentBoxSelector: '.product__info-content-box'\r\n    });\r\n    \r\n    const headerCatalog = new MenuCatalog({\r\n        menuSelector: '.header__menu'\r\n    });\r\n\r\n    const productCards = new ProductCards({\r\n        cardSelector: '.product-card'\r\n    });\r\n\r\n    const tooltips = new Tooltips({});\r\n\r\n\r\n\r\n    \r\n    if (nodeExist('.brands__slider.splide')) {\r\n        const brandsSlider = new Splide('.brands__slider.splide', {\r\n            type: 'loop',\r\n            perPage: 4,\r\n            perMove: 1,\r\n            pagination: false\r\n        }).mount();\r\n    }\r\n\r\n    if (nodeExist('.banner-slider.splide')) {\r\n        const bannerSlider = new Splide('.banner-slider.splide', {\r\n            type: 'loop',\r\n            perPage: 1,\r\n            perMove: 1,\r\n            pagination: false,\r\n            arrows: false,\r\n            gap: 40,\r\n            autoplay: true,\r\n            interval: 3000,\r\n            drag: false,\r\n            pauseOnHover: false,\r\n            pauseOnFocus: false,\r\n        }).mount();\r\n    }\r\n\r\n\r\n\r\n    if (nodeExist('.product__view-slider.splide')) {\r\n        const productCardThumbs = new Splide( '.product__view-slider.splide', {\r\n            type: 'loop',\r\n            perPage: 3,\r\n            perMove: 1,\r\n            height: 380,\r\n            gap         : 8,\r\n            cover       : false,\r\n            isNavigation: true,\r\n            pagination: false,\r\n            focus       : 'center',\r\n            direction: 'ttb',\r\n        }).mount();\r\n        const productCardPrimary = new Splide( '.product__view-img-wrapper', {\r\n            type       : 'fade',\r\n            pagination : false,\r\n            arrows     : false,\r\n            cover      : false,\r\n            drag: false,\r\n        });\r\n        productCardPrimary.sync( productCardThumbs ).mount();\r\n    }\r\n});\r\n"],"file":"../main.min.js"}