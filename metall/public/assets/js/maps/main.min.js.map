{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["const faqItems = document.querySelectorAll('.faq__item');\r\nif (faqItems) {\r\n    faqItems.forEach(item => {\r\n        item.addEventListener('click', e => {\r\n            const title = e.target.closest('.faq__title');\r\n            if (title) item.classList.toggle('shown');\r\n        });\r\n    });\r\n}\r\n\r\nfunction getCurrencyNum(val) {\r\n    val = String(val).split('').reverse();\r\n    for (let i = 3; i < val.length; i+=4) {\r\n        val.splice(i, 0, ' ');\r\n    }\r\n    return val.reverse().join('');\r\n}\r\nfunction createElem({tag = 'div', classNames, attrs, html}) {\r\n    const elem = document.createElement(tag);\r\n    if (classNames) classNames.forEach(cls => {elem.classList.add(cls)});\r\n    for (let attr in attrs) {\r\n        elem.setAttribute(attr, attrs[attr]);\r\n    }\r\n    if (!isNullableValue(html)) elem.innerHTML = html;\r\n    return elem;\r\n}\r\n\r\nfunction isNullableValue(val) {\r\n    if (val instanceof Array) {\r\n        for (let i = 0; i < val.length; i++) {\r\n            if (val[i] === null || val[i] === undefined || val[i] === false) return true;\r\n        }\r\n    } else {\r\n        if (val === null || val === undefined || val === false) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nclass Toast {\r\n    constructor({selector, time, timeAnim}) {\r\n        this.selector = selector || '.toast';\r\n        this.el = document.querySelector(this.selector);\r\n        this.time = time || 2500;\r\n        this.timeAnim = timeAnim || 500;\r\n        this.isShowing = false;\r\n        this.timer = null;\r\n        if (this.el) {\r\n            this.setup();\r\n        }\r\n    }\r\n    showToast() {\r\n        clearTimeout(this.timer);\r\n        if (this.isShowing) {\r\n            this.el.classList.remove('show');\r\n            this.isShowing = false;\r\n        }\r\n        setTimeout(() => {\r\n            this.el.classList.add('show');\r\n            this.isShowing = true;\r\n        }, 0);\r\n        this.timer = setTimeout(() => {\r\n            this.el.classList.remove('show');\r\n            this.isShowing = false;\r\n            clearTimeout(this.timer);\r\n        }, this.time);\r\n    }\r\n    hideToast() {\r\n        this.el.classList.remove('show');\r\n        clearTimeout(this.timer);\r\n    }\r\n    setup() {\r\n        this.el.style.animationDuration = this.timeAnim / 1000 + 's';\r\n        this.el.addEventListener('click', e => {\r\n            this.hideToast();\r\n        });\r\n    }\r\n}\r\nconst toastProductAdded = new Toast({\r\n    selector: '#productAdded',\r\n    timeAnim: 300\r\n});\r\n\r\nclass Cart {\r\n    constructor({cartBtnSelector}) {\r\n        this.cartBtn = document.querySelector(cartBtnSelector);\r\n        this.setup();\r\n        this.updateBtn();\r\n    }\r\n    updateBtn() {\r\n        const innerLink = this.cartBtn.querySelector('a.cart-btn__link');\r\n        const val = this.getCartCount();\r\n        if (val > 0) {\r\n            innerLink.setAttribute('data-cart-count', val);\r\n            this.cartBtn.classList.add('not-empty');\r\n        } else {\r\n            innerLink.removeAttribute('data-cart-count');\r\n            this.cartBtn.classList.remove('not-empty');\r\n        }\r\n    }\r\n    addItem({id = null, title = null, price = null, count = null}) {    //мутабельный\r\n        const cart = this.getCart();\r\n        if (isNullableValue([id, title, price, count])) {\r\n            throw new Error('Неверное значение для добавления товара в корзину');\r\n        };\r\n        cart[id] = {title, price, count};\r\n        this.setCart(cart);\r\n        return this.getCart();\r\n    }\r\n    increaseCount(id) {\r\n        const cart = this.getCart();\r\n        +(cart[id].count) >= 0 ?\r\n            cart[id].count += 1 :\r\n            cart[id].count = 0;\r\n        this.setCart(cart);\r\n    }\r\n    decreaseCount(id) {\r\n        const cart = this.getCart();\r\n        +(cart[id].count) > 0 ?\r\n            cart[id].count -= 1 :\r\n            cart[id].count = 0;\r\n        this.setCart(cart);\r\n    }\r\n    removeItem(id) {    //мутабельный\r\n        const cart = this.getCart();\r\n        if (cart[id]) delete cart[id];\r\n        this.setCart(cart);\r\n        return this.getCart();\r\n    }\r\n    getItem(id) {\r\n        const cart = this.getCart();\r\n        if (cart[id]) return cart[id];\r\n    }\r\n    setCart(cart) {\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n        this.updateBtn();\r\n        return this.getCart();\r\n    }\r\n    removeAll() {   //мутабельный\r\n        this.setCart({});\r\n        return this.getCart();\r\n    }\r\n    getCart() {\r\n        return JSON.parse(localStorage.getItem('cart'));\r\n    }\r\n    getCartCount() {\r\n        const cart = this.getCart();\r\n        let count = 0;\r\n        for (let key in cart) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n    getInputs() {\r\n        const cart = this.getCart();\r\n        const inputs = [];\r\n        for (let id in cart) {\r\n            const el = cart[id];\r\n            const str = 'Название: ' + el.title + '; Количество: ' + el.count + '; Сумма: ' + getCurrencyNum(el.price * el.count) + ' руб';\r\n            const inp = createElem({\r\n                tag: 'input',\r\n                attrs: {\r\n                    name: id,\r\n                    value: str,\r\n                    type: 'hidden'\r\n                }\r\n            });\r\n            inputs.push(inp);\r\n        }\r\n        const totalSumInput = createElem({\r\n            tag: 'input',\r\n            attrs: {\r\n                name: 'totalsum',\r\n                value: 'Итоговая сумма заказа: ' + getCurrencyNum(this.getTotalSum()),\r\n                type: 'hidden'\r\n            }\r\n        });\r\n        inputs.push(totalSumInput);\r\n        return inputs;\r\n    }\r\n    getTotalSum() {\r\n        const cart = this.getCart();\r\n        let sum = 0;\r\n        for (let id in cart) {\r\n            sum += cart[id].price * cart[id].count;\r\n        }\r\n        return sum;\r\n    }\r\n    setup() {\r\n        if (localStorage.getItem('cart') == null) {\r\n            let cart = {};\r\n            cart = JSON.stringify(cart);\r\n            localStorage.setItem('cart', cart);\r\n        }\r\n    }\r\n}\r\nconst cart = new Cart({\r\n    cartBtnSelector: '#cartBtn'\r\n});\r\n\r\nclass ProductCard {\r\n    constructor(element) {\r\n        if (typeof element === 'string') {\r\n            this.el = document.querySelector(element);\r\n        } else if (element instanceof HTMLElement) {\r\n            this.el = element;\r\n        } else {\r\n            throw new Error('Ошибка');\r\n        }\r\n        this.btnMinus = this.el.querySelector('[name=\"cart-action\"][value=\"minus\"]');\r\n        this.btnPlus = this.el.querySelector('[name=\"cart-action\"][value=\"plus\"]');\r\n        this.input = this.el.querySelector('.product-item__cart-input');\r\n        this.btnAdd = this.el.querySelector('.product-item__cart-add');\r\n        this.id = this.el.getAttribute('data-id');\r\n        this.title = this.el.querySelector('.product-item__title').getAttribute('title');\r\n        this.price = this.el.querySelector('.product-item__price').getAttribute('data-price');\r\n        this.setup();\r\n    }\r\n    _validateDecimal(input) {\r\n        const validCodes = [\r\n            8,9,\r\n            37,38,39,40,\r\n            48,49,50,51,52,53,54,55,56,57,\r\n            96,97,98,99,100,101,102,103,104,105\r\n        ];\r\n        input.addEventListener('keydown', e => {\r\n            if (!validCodes.includes(e.keyCode)) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n    increase() {\r\n        const curVal = this.input.value;\r\n        isNaN(parseInt(curVal)) ?\r\n            this.input.value = 1 :\r\n            this.input.value = parseInt(curVal) + 1;\r\n    }\r\n    decrease() {\r\n        const curVal = this.input.value;\r\n        isNaN(parseInt(curVal)) ?\r\n            this.input.value = 0 :\r\n            parseInt(curVal) > 0 ? this.input.value = parseInt(curVal) - 1 : void(0);\r\n    }\r\n    setup() {\r\n        this._validateDecimal(this.input);\r\n        this.btnPlus.addEventListener('click', e => {\r\n            this.increase();\r\n        });\r\n        this.btnMinus.addEventListener('click', e => {\r\n            this.decrease();\r\n        });\r\n        this.btnAdd.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            const count = parseInt(this.input.value);\r\n            if (count > 0) {\r\n                const data = {\r\n                    id: this.id,\r\n                    count: parseInt(this.input.value),\r\n                    title: this.title,\r\n                    price: parseInt(this.price)\r\n                };\r\n                cart.addItem(data);\r\n                toastProductAdded.showToast();\r\n            } else {\r\n                alert('Уточните количество товара');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nlet activeModal = null;\r\nclass Modal {\r\n    constructor(selector, {onCall}) {\r\n        this.selector = selector;\r\n        this.el = document.querySelector(this.selector);\r\n        this.isInit = false;\r\n        if (this.el) {\r\n            this.isInit = true;\r\n            this.callBtn = document.querySelector('[data-call=\"' + this.el.getAttribute('id') + '\"]');\r\n            this.onCall = onCall || function(){};\r\n            this.overlay = this.el.querySelector('.modal__overlay');\r\n            this.closeBtn = this.el.querySelector('.modal__close');\r\n            this.setup();\r\n        }\r\n    }\r\n    showModal(disableAnimation = false) {\r\n        activeModal = this;\r\n        if (disableAnimation) {\r\n            this.el.classList.add('active');\r\n        } else {\r\n            this.el.classList.remove('hiding');\r\n            this.el.classList.add('active');\r\n            this.el.classList.add('showing');\r\n            setTimeout(() => {\r\n                this.el.classList.remove('showing');\r\n            }, 250);\r\n        }\r\n        document.body.classList.add('lock');\r\n        this.onCall();\r\n    }\r\n    hideModal(disableAnimation = false) {\r\n        activeModal = null;\r\n        if (disableAnimation) {\r\n            this.el.classList.remove('active');\r\n        } else {\r\n            this.el.classList.remove('showing');\r\n            this.el.classList.add('hiding');\r\n            setTimeout(() => {\r\n                this.el.classList.remove('active');\r\n                this.el.classList.remove('hiding');\r\n            }, 250);\r\n        }\r\n        document.body.classList.remove('lock');\r\n    }\r\n    showingHandler() {\r\n        this.el.classList.contains('active') ?\r\n            this.hideModal() :\r\n            this.showModal();\r\n    }\r\n    setup() {\r\n        if (this.closeBtn) {\r\n            this.closeBtn.addEventListener('click', (e) => {\r\n                this.hideModal();\r\n            });\r\n        }\r\n        this.overlay.addEventListener('mousedown', (e) => {\r\n            if (e.target === this.overlay) {\r\n                this.hideModal();\r\n            }\r\n        });\r\n        if (this.callBtn) {\r\n            this.callBtn.addEventListener('click', e => {\r\n                this.showModal();\r\n            });\r\n        }\r\n    }\r\n}\r\nconst callMe = new Modal('#callMe', {});\r\nconst thankModal = new Modal('#thankModal', {});\r\nconst cartConfirmDelete = new Modal('#cartConfirmDelete', {});\r\nif (cartConfirmDelete.isInit) {\r\n    cartConfirmDelete.btnConfirm = cartConfirmDelete.el.querySelector('[name=\"delete\"][value=\"confirm\"]');\r\n    cartConfirmDelete.btnCancel = cartConfirmDelete.el.querySelector('[name=\"delete\"][value=\"cancel\"]');\r\n    cartConfirmDelete.btnConfirm.addEventListener('click', e => {\r\n        cart.removeItem(cartConfirmDelete.deletingId);\r\n        cartTable.updateTable();\r\n        cartConfirmDelete.deletingId = null;\r\n        cartConfirmDelete.hideModal();\r\n    });\r\n    cartConfirmDelete.btnCancel.addEventListener('click', e => {\r\n        cartConfirmDelete.hideModal();\r\n    });\r\n}\r\n\r\n\r\nclass CartTable {\r\n    constructor(wrapperSelector, {emptyText}) {\r\n        this.wrapper = document.querySelector(wrapperSelector);\r\n        this.table = document.querySelector('.cart__table');\r\n        this.preloader = document.querySelector('.sk-fading-circle');\r\n        this.emptyPlaceholderElem = document.querySelector('.cart-empty-placeholder');\r\n        this.totalOutput = document.querySelector('.cart__total .output');\r\n        this.emptyText = emptyText || '';\r\n        if (this.wrapper) {\r\n            this.setup();\r\n        }\r\n    }\r\n    getTableRow(data) {\r\n        const tr = createElem({\r\n            tag: 'tr',\r\n            classNames: ['cart__row'],\r\n            attrs: {\r\n                'data-id': data.id\r\n            }\r\n        });\r\n        const fields = ['title', 'price', 'count'];\r\n        const tdList = [];\r\n\r\n\r\n        for (let i = 0; i < fields.length; i++) {\r\n            const td = createElem({\r\n                tag: 'td',\r\n                html: data[fields[i]]\r\n            });\r\n            tdList.push(td);\r\n        }\r\n        tdList[1].innerText = getCurrencyNum(tdList[1].innerText) + ' руб'; \r\n\r\n        const actionsCol = createElem({classNames: ['cart__actions-col']});\r\n        const btnActionMore = createElem({\r\n            tag: 'button',\r\n            classNames: ['cart__btn-more'],\r\n        });\r\n        const btnActionLess = createElem({\r\n            tag: 'button',\r\n            classNames: ['cart__btn-less'],\r\n        });\r\n        btnActionMore.addEventListener('click', e => {\r\n            cart.increaseCount(data.id);\r\n            this.updateTable();\r\n        });\r\n        btnActionLess.addEventListener('click', e => {\r\n            cart.decreaseCount(data.id)\r\n            this.updateTable();\r\n        });\r\n        actionsCol.append(btnActionMore, btnActionLess);\r\n\r\n        tdList[2].append(actionsCol);\r\n\r\n        const totalSum = parseInt(data.price) * parseInt(data.count);\r\n\r\n        tdList.push(createElem({\r\n            tag: 'td',\r\n            html: getCurrencyNum(totalSum) + ' руб'\r\n        }));\r\n\r\n\r\n        const btnDelete = createElem({\r\n            tag: 'button',\r\n            classNames: ['cart__delete'],\r\n            attrs: {title: 'Удалить'},\r\n            html: '<img src=\"assets/img/icon/remove.svg\" alt=\"Удалить\">'\r\n        });\r\n\r\n        btnDelete.addEventListener('click', e => {\r\n            cartConfirmDelete.showModal();\r\n            document.querySelector('.cart-removing-title').innerText = data.title;\r\n            cartConfirmDelete.deletingId = data.id;\r\n        });\r\n\r\n        tdList.push(createElem({\r\n            tag: 'td',\r\n        }));\r\n        tdList[4].append(btnDelete);\r\n\r\n        tr.append(...tdList);\r\n\r\n        return tr;\r\n    }\r\n    showLoader() {\r\n        this.wrapper.classList.add('hidden');\r\n        this.emptyPlaceholderElem.classList.add('hidden');\r\n        this.preloader.classList.remove('hidden');\r\n    }\r\n    showPlaceholder() {\r\n        this.wrapper.classList.add('hidden');\r\n        this.preloader.classList.add('hidden');\r\n        this.emptyPlaceholderElem.classList.remove('hidden');\r\n        this.emptyPlaceholderElem.innerText = this.emptyText;\r\n    }\r\n    showTable() {\r\n        this.emptyPlaceholderElem.classList.add('hidden');\r\n        this.preloader.classList.add('hidden');\r\n        this.wrapper.classList.remove('hidden');\r\n    }\r\n    checkContent() {\r\n        if (cart.getCartCount() > 0) {\r\n            this.showTable();\r\n            return true;\r\n        } else {\r\n            this.showPlaceholder();\r\n            return false;\r\n        }\r\n    }\r\n    updateTable() {\r\n        if (this.checkContent()) {\r\n            const items = cart.getCart();\r\n            const tableBody = this.table.querySelector('tbody');\r\n            tableBody.innerHTML = '';\r\n            for (let id in items) {\r\n                const data = {\r\n                    id: id,\r\n                    price: items[id].price,\r\n                    title: items[id].title,\r\n                    count: items[id].count,\r\n                };\r\n                tableBody.append(this.getTableRow(data));\r\n            }\r\n            this.updateTotalSum();\r\n        }\r\n    }\r\n    updateTotalSum() {\r\n        const items = cart.getCart();\r\n        let sum = 0;\r\n        for (let id in items) {\r\n            const curSum = items[id].count * items[id].price;\r\n            sum += curSum;\r\n        }\r\n        sum = getCurrencyNum(sum);\r\n        this.totalOutput.innerText = sum + ' руб';\r\n    }\r\n    setup() {\r\n        this.updateTable();\r\n    }\r\n}\r\n\r\nconst cartTable = new CartTable('.cart-content-wrapper', {\r\n    emptyText: 'Ваша корзина на данный момент пуста'\r\n});\r\n\r\n\r\n\r\nfunction sendForm(form, onSuccess = null) {\r\n    onSuccess = onSuccess || function(){};\r\n    event.preventDefault();\r\n    const policy = form.querySelector('input[name=\"policy\"]');\r\n    if (!isNullableValue(policy)) {\r\n        if (!policy.checked) {\r\n            alert('Мы не можем принять заявку без вашего согласия с политикой конфиденциальности');\r\n            return false;\r\n        }\r\n    }\r\n    if (validateForm(form)) {\r\n        // var xhr = new XMLHttpRequest();\r\n        // var body = serialize(form);\r\n        // console.log(body);\r\n        // xhr.open('POST', './mail.php');\r\n        // xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        // xhr.onreadystatechange = function() {\r\n        //     if (xhr.readyState == 4 && xhr.status == 200) {\r\n        //         form.reset();\r\n        //         onSuccess();\r\n                // console.log(cart.getInputs());\r\n                const inputs = cart.getInputs();\r\n                form.append(...inputs);\r\n                activeModal ? activeModal.hideModal() : void(0);\r\n                thankModal.showModal();\r\n                                            // form.setAttribute('data-done', null);\r\n                                            // if (form.hasAttribute('data-after')) {\r\n                                            //     activeModal ? activeModal.hideModal() : void(0);\r\n                                            //     const id = form.getAttribute('data-after');\r\n                                            //     afterModals[id].showModal();\r\n                                            // }\r\n            // }\r\n        // };\r\n        // xhr.send(body);\r\n    } else {\r\n        alert('Введите корректные данные');\r\n    }\r\n}\r\nfunction validateForm(form) {\r\n\tvar regTel = /^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/;\r\n\tvar inputTel = form.querySelector('input[name=\"tel\"]');\r\n    var inputName = form.querySelector('input[name=\"name\"]');\r\n    var allow = true;\r\n    if (inputTel && !inputTel.value.match(regTel)) allow = false;\r\n    if (inputName && inputName.value.length < 2) allow = false;\r\n    return allow;\r\n}\r\nfunction serialize(form) {\r\n\tif (!form || form.nodeName !== \"FORM\") {\r\n\t\treturn false;\r\n\t}\r\n\tvar i, j, q = [];\r\n\tfor (i = form.elements.length - 1; i >= 0; i = i - 1) {\r\n\t\tif (form.elements[i].name === \"\") {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tswitch (form.elements[i].nodeName) {\r\n\t\t\tcase 'INPUT':\r\n\t\t\t\tswitch (form.elements[i].type) {\r\n\t\t\t\t\tcase 'text':\r\n\t\t\t\t\tcase 'tel':\r\n\t\t\t\t\tcase 'email':\r\n\t\t\t\t\tcase 'hidden':\r\n\t\t\t\t\tcase 'password':\r\n\t\t\t\t\tcase 'button':\r\n\t\t\t\t\tcase 'reset':\r\n\t\t\t\t\tcase 'submit':\r\n\t\t\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].value));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'checkbox':\r\n\t\t\t\t\t\twriteCommaCheckbox(form, i, q);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'radio':\r\n\t\t\t\t\t\tif (form.elements[i].checked) {\r\n\t\t\t\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].value));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'file':\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'TEXTAREA':\r\n\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].value));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'SELECT':\r\n\t\t\t\tswitch (form.elements[i].type) {\r\n\t\t\t\t\tcase 'select-one':\r\n\t\t\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].value));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'select-multiple':\r\n\t\t\t\t\t\tfor (j = form.elements[i].options.length - 1; j >= 0; j = j - 1) {\r\n\t\t\t\t\t\t\tif (form.elements[i].options[j].selected) {\r\n\t\t\t\t\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].options[j].value));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'BUTTON':\r\n\t\t\t\tswitch (form.elements[i].type) {\r\n\t\t\t\t\tcase 'reset':\r\n\t\t\t\t\tcase 'submit':\r\n\t\t\t\t\tcase 'button':\r\n\t\t\t\t\t\tq.push(form.elements[i].name + \"=\" + encodeURIComponent(form.elements[i].value));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn q.join(\"&\");\r\n}\r\n\r\nif (document.querySelector('.product-item')) {\r\n    const productCards = document.querySelectorAll('.product-item');\r\n    productCards.forEach(card => {\r\n        const cardInstance = new ProductCard(card);\r\n    });\r\n}"],"file":"../main.min.js"}